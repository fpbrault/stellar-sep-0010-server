var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.625,1,1.834]],["body/controllers/AppController.html",[0,2.525,1,3.123,2,2.002,3,0.586,4,0.586,5,0.51,6,3.019,7,0.586,8,1.474,9,3.807,10,3.677,11,2.261,12,0.042,13,3.677,14,0.944,15,3.677,16,4.637,17,1.615,18,2.851,19,2.254,20,0.944,21,1.169,22,0.753,23,1.052,24,5.079,25,1.637,26,0.85,27,3.677,28,2.585,29,0.667,30,2.261,31,3.677,32,3.677,33,1.991,34,3.26,35,2.261,36,4.637,37,2.261,38,0.586,39,0.13,40,1.298,41,2.002,42,1.298,43,1.474,44,1.298,45,3.677,46,3.677,47,3.677,48,3.677,49,0.032,50,0.032]],["title/modules/AppModule.html",[51,1.3,52,1.834]],["body/modules/AppModule.html",[1,3.075,2,2.473,3,0.567,4,0.567,5,0.494,12,0.041,26,0.913,29,0.645,33,2.182,35,2.187,38,0.567,39,0.126,49,0.031,50,0.031,51,1.979,52,3.628,53,1.729,54,2.207,55,2.92,56,2.92,57,2.92,58,3.031,59,3.031,60,2.426,61,2.792,62,2.187,63,1.937,64,3.557,65,3.192,66,3.192,67,3.557,68,3.557,69,3.557,70,2.501,71,2.501,72,0.913,73,4.541,74,3.557,75,2.501,76,3.557]],["title/controllers/AuthController.html",[0,1.625,77,1.834]],["body/controllers/AuthController.html",[0,1.605,2,1.605,3,0.47,4,0.47,5,0.409,7,0.47,8,1.275,11,2.466,12,0.042,14,1.03,17,1.555,19,2.787,20,1.03,21,1.275,22,1.002,23,1.147,25,1.864,26,0.842,29,0.534,33,1.787,35,1.812,38,0.47,39,0.104,41,2.184,42,1.415,43,1.555,44,1.415,49,0.027,50,0.027,60,1.987,70,2.072,77,3.009,78,2.072,79,2.947,80,1.155,81,1.864,82,3.743,83,4.017,84,2.419,85,1.482,86,2.947,87,3.292,88,2.184,89,2.184,90,2.419,91,4.559,92,2.947,93,3.292,94,1.572,95,3.292,96,2.947,97,4.01,98,1.155,99,0.843,100,1.04,101,2.947,102,2.072,103,0.937,104,1.464,105,2.419,106,2.072,107,2.947,108,1.432,109,3.292,110,2.947,111,2.947,112,2.947]],["title/modules/AuthModule.html",[51,1.3,58,1.625]],["body/modules/AuthModule.html",[2,2.537,3,0.59,4,0.59,5,0.514,12,0.041,26,0.91,29,0.672,33,2.205,35,2.278,38,0.59,39,0.131,49,0.032,50,0.032,51,2.03,53,1.8,54,2.264,58,3.196,60,2.451,61,2.864,62,2.278,63,2.017,65,3.275,66,2.604,70,2.604,71,2.604,72,0.951,75,2.604,77,3.134,113,3.041,114,3.041,115,3.063,116,3.704,117,3.704,118,3.704,119,4.659,120,2.278]],["title/classes/Challenge.html",[39,0.106,85,0.766]],["body/classes/Challenge.html",[3,0.357,4,0.357,5,0.311,7,0.357,11,2.662,12,0.041,14,1.111,20,0.848,22,0.988,23,1.381,26,0.69,28,2.758,37,1.379,38,0.527,39,0.139,41,2.972,49,0.022,50,0.022,51,0.977,85,1.282,88,1.799,89,1.799,99,1.238,103,1.05,104,1.465,121,1.09,122,1.576,123,1.809,124,2.322,125,2.742,126,3.221,127,3.043,128,5.394,129,1.841,130,2.486,131,4.329,132,2.104,133,3.304,134,3.304,135,4.329,136,2.242,137,1.886,138,1.295,139,1.44,140,1.606,141,1.44,142,1.44,143,2.242,144,3.923,145,4.6,146,3.304,147,3.923,148,3.304,149,1.606,150,3.304,151,3.304,152,3.304,153,4.329,154,3.304,155,4.329,156,2.176,157,2.662,158,4.329,159,3.304,160,2.712,161,2.242,162,2.242,163,4.993,164,3.304,165,3.304,166,3.304,167,3.304,168,2.712,169,3.304,170,3.304,171,2.712,172,3.304,173,1.295,174,3.304,175,3.304,176,3.304,177,2.242,178,2.242,179,3.304,180,3.304,181,4.329,182,3.304,183,3.304,184,2.242,185,2.242,186,2.242,187,3.304,188,2.242,189,2.712,190,4.329,191,2.242,192,3.923,193,2.242,194,3.304,195,4.329,196,0.879,197,0.879,198,0.791,199,0.791,200,1.576,201,2.712,202,2.242,203,1.841,204,2.242,205,0.879,206,0.713,207,1.841,208,2.242,209,2.242,210,2.242,211,0.977,212,2.242,213,2.242,214,2.242]],["title/injectables/ChallengeService.html",[60,1.3,215,0.476]],["body/injectables/ChallengeService.html",[3,0.372,4,0.372,5,0.324,7,0.372,8,1.082,12,0.042,14,1.133,17,1.403,20,1.031,21,1.276,22,0.96,23,1.148,25,1.729,26,0.781,29,0.423,38,0.64,39,0.121,40,0.824,41,2.187,42,1.201,43,1.491,44,1.201,49,0.023,50,0.023,60,2.045,72,0.599,80,0.915,81,1.729,82,2.794,84,2.794,85,1.412,87,2.794,88,2.403,89,2.403,98,0.915,99,0.973,100,0.824,102,1.641,103,1.403,104,1.482,105,2.794,108,1.134,109,3.297,123,0.915,124,2.392,126,4.151,130,1.483,138,0.915,141,1.483,142,1.483,145,2.794,157,1.435,173,0.915,203,1.916,205,1.574,206,1.403,215,0.542,216,1.017,217,1.641,218,2.794,219,2.794,220,2.145,221,4.016,222,1.271,223,1.92,224,2.334,225,2.334,226,2.334,227,2.334,228,3.403,229,3.403,230,2.334,231,3.403,232,4.413,233,2.334,234,2.794,235,1.017,236,4.413,237,1.654,238,2.334,239,2.334,240,2.334,241,2.334,242,2.334,243,3.403,244,2.334,245,2.334,246,2.334,247,2.334,248,2.334,249,2.334,250,3.403,251,1.916,252,1.017,253,1.017,254,1.134,255,1.916,256,1.916,257,2.334,258,2.334,259,3.403,260,2.334,261,3.403,262,2.334,263,3.403,264,2.334,265,2.334,266,2.334,267,3.403,268,2.334,269,2.334,270,2.334,271,2.334,272,2.334,273,2.334,274,2.334,275,1.483,276,2.334,277,1.483]],["title/modules/CustomValidatorsModule.html",[51,1.3,59,1.625]],["body/modules/CustomValidatorsModule.html",[3,0.627,4,0.627,5,0.546,12,0.041,26,0.835,29,0.713,38,0.627,39,0.139,49,0.033,50,0.033,51,2.107,53,1.911,54,2.35,59,3.181,61,2.973,62,2.418,63,2.142,65,3.399,66,2.765,71,2.765,72,1.01,75,2.765,198,1.707,199,1.707,200,2.765,278,3.229,279,3.229,280,1.815,281,1.815,282,3.933,283,1.707]],["title/injectables/JwtAuthGuard.html",[30,1.834,215,0.476]],["body/injectables/JwtAuthGuard.html",[3,0.703,4,0.703,5,0.612,12,0.04,26,0.826,29,0.8,30,3.185,38,0.703,39,0.156,49,0.035,50,0.035,120,2.711,215,0.826,216,1.922,284,3.62,285,3.62,286,4.41,287,3.62,288,4.41]],["title/injectables/JwtStrategy.html",[115,1.625,215,0.476]],["body/injectables/JwtStrategy.html",[3,0.589,4,0.589,5,0.513,7,0.589,8,1.478,12,0.041,14,1.194,17,1.175,18,2.272,20,1.194,21,1.478,22,0.952,23,1.33,26,0.852,29,0.67,38,0.589,39,0.131,40,1.304,43,1.175,49,0.032,50,0.032,72,0.949,81,1.797,108,1.796,115,2.533,120,2.272,196,1.823,215,0.741,216,1.61,222,2.012,223,2.203,287,3.033,289,3.033,290,3.695,291,4.651,292,3.695,293,3.033,294,3.695,295,3.695,296,3.695,297,3.033,298,3.695,299,3.695,300,3.695,301,3.695,302,3.695,303,3.695,304,1.796,305,3.695,306,3.695,307,3.695,308,3.695,309,3.695,310,3.695]],["title/classes/Token.html",[19,1.45,39,0.106]],["body/classes/Token.html",[3,0.537,4,0.537,5,0.468,7,0.537,11,2.072,12,0.041,14,0.865,19,2.601,20,1.126,22,0.69,26,0.777,28,3.082,37,2.072,38,0.699,39,0.173,41,2.654,49,0.03,50,0.03,85,1.325,88,2.388,89,2.388,94,1.91,103,1.861,104,1.254,121,1.637,123,1.718,124,3.082,129,2.766,137,2.391,139,2.391,189,3.599,196,1.32,197,1.32,200,2.368,280,1.071,281,1.071,283,1.189,311,2.766,312,2.666,313,5.162,314,4.385,315,3.369,316,3.369,317,3.369,318,2.131,319,2.131,320,2.131,321,2.131,322,3.369,323,3.369,324,3.369,325,3.369,326,3.369]],["title/injectables/TokenService.html",[33,1.169,215,0.476]],["body/injectables/TokenService.html",[3,0.407,4,0.407,5,0.354,7,0.407,8,1.154,9,2.98,12,0.042,14,1.084,17,1.462,18,2.597,19,2.809,20,1.084,21,1.342,22,0.995,23,1.208,25,1.715,26,0.805,29,0.463,33,1.803,34,1.795,38,0.673,39,0.129,40,0.901,42,0.901,43,1.342,44,0.901,49,0.025,50,0.025,72,0.655,80,1.001,81,1.782,83,3.776,85,1.084,90,2.98,93,2.98,94,1.422,95,2.98,98,1.001,99,1.038,100,1.281,103,1.342,104,1.444,106,3.233,108,1.241,123,1.001,205,1.803,206,1.154,211,1.113,215,0.579,216,1.113,218,2.98,219,2.98,222,1.39,223,1.979,235,1.113,251,2.096,252,1.113,253,1.113,255,2.096,256,2.096,275,1.113,277,1.113,293,2.096,327,1.795,328,3.629,329,2.553,330,3.629,331,2.553,332,2.553,333,3.629,334,3.629,335,2.096,336,3.629,337,2.553,338,1.764,339,2.553,340,2.553,341,2.553,342,2.553,343,2.553,344,2.553,345,2.553,346,2.553,347,2.553,348,2.553,349,2.553,350,2.553,351,2.553,352,2.553,353,2.553,354,4.223,355,2.553,356,2.553,357,2.553,358,2.553,359,2.553,360,2.553,361,3.629,362,3.629,363,2.553,364,2.553,365,2.553,366,2.553,367,3.629,368,2.553]],["title/coverage.html",[369,3.32]],["body/coverage.html",[0,2.499,1,2.224,5,0.502,6,2.969,12,0.041,19,1.757,22,0.74,30,2.224,33,1.417,39,0.194,49,0.031,50,0.031,60,1.576,77,2.224,78,2.542,85,0.928,115,1.969,122,3.226,127,2.542,198,1.276,199,1.276,206,1.149,215,0.891,217,2.542,280,1.149,281,1.149,283,1.276,284,2.969,285,2.969,289,2.969,311,2.969,327,2.542,369,2.969,370,2.969,371,3.616,372,3.616,373,2.659,374,4.589,375,4.589,376,2.659,377,4.589,378,3.616,379,3.616,380,4.589,381,4.589,382,5.04,383,4.589,384,5.04,385,3.616,386,3.616,387,3.616,388,3.616,389,3.616,390,2.969,391,3.616,392,2.969,393,3.616,394,3.616,395,3.616]],["title/dependencies.html",[54,1.74,396,2.505]],["body/dependencies.html",[12,0.042,18,2.369,29,0.699,37,2.369,39,0.169,49,0.033,50,0.033,54,1.873,72,0.989,99,1.102,100,1.36,120,2.369,197,1.51,201,3.163,234,3.163,297,4.259,335,3.163,397,5.189,398,3.854,399,3.854,400,3.854,401,3.854,402,3.854,403,3.854,404,3.92,405,3.854,406,3.854,407,3.854,408,3.854,409,3.854,410,3.854,411,3.854,412,3.854,413,3.854,414,3.854,415,3.854,416,3.854,417,3.854,418,3.854,419,3.854,420,3.854,421,3.854,422,3.854,423,3.854,424,3.854,425,3.854,426,3.854,427,3.854,428,3.854,429,3.854]],["title/miscellaneous/functions.html",[430,1.217,431,2.939]],["body/miscellaneous/functions.html",[7,0.737,12,0.036,49,0.036,50,0.036,390,3.795,392,4.603,430,2.247,431,3.795,432,4.623]],["title/injectables/hasValidSignatures.html",[215,0.476,280,0.948]],["body/injectables/hasValidSignatures.html",[3,0.257,4,0.257,5,0.224,7,0.257,8,0.816,12,0.042,14,0.82,17,0.816,20,0.82,21,1.346,22,0.525,23,0.734,25,1.128,26,0.581,29,0.292,38,0.757,39,0.173,40,0.906,42,1.495,43,1.802,44,1.718,49,0.017,50,0.017,72,0.414,80,1.252,81,1.676,85,0.659,94,1.558,98,0.632,99,0.734,100,0.569,103,1.547,104,1.568,108,0.784,123,0.632,125,1.932,130,0.703,132,1.247,137,1.587,138,0.632,139,1.846,140,1.247,141,1.118,142,1.587,149,0.784,156,0.703,173,1.428,196,1.006,197,0.632,198,1.286,199,1.128,205,1.558,206,0.816,211,1.733,215,0.509,216,0.703,220,0.784,222,0.878,223,1.807,235,1.733,237,0.784,252,1.733,253,2.07,254,1.932,275,1.846,277,1.587,280,1.264,281,1.158,283,1.286,304,2.24,312,0.784,318,1.77,319,0.784,320,1.553,321,1.247,338,0.784,373,0.784,376,1.553,433,2.165,434,1.397,435,2.51,436,1.613,437,1.613,438,2.586,439,2.165,440,1.613,441,2.651,442,2.306,443,2.651,444,2.586,445,2.586,446,0.878,447,2.51,448,0.878,449,1.74,450,0.878,451,0.878,452,0.878,453,1.397,454,0.878,455,1.397,456,0.878,457,0.878,458,1.397,459,0.878,460,0.878,461,0.878,462,0.878,463,0.878,464,0.878,465,0.878,466,0.878,467,0.878,468,1.74,469,0.878,470,0.878,471,0.878,472,0.878,473,0.878,474,1.397,475,0.878,476,0.878,477,0.878,478,0.878,479,0.878,480,0.878,481,0.878,482,0.878,483,0.878,484,0.878,485,0.878,486,0.878,487,1.397,488,0.878,489,0.878,490,0.878,491,0.878,492,0.878,493,0.878]],["title/index.html",[7,0.399,494,2.056,495,2.056]],["body/index.html",[12,0.04,49,0.033,50,0.033,88,2.68,89,2.68,99,1.157,156,2.145,157,2.489,496,4.047,497,4.047,498,4.047,499,4.047,500,4.047,501,4.047,502,4.047,503,5.303,504,4.047,505,4.921,506,4.047,507,4.047,508,4.047,509,4.04,510,4.04,511,4.04,512,4.047,513,4.047,514,4.047,515,4.047,516,4.921,517,4.047,518,2.845,519,3.323,520,3.323,521,3.323,522,4.047,523,4.921,524,4.047,525,4.047,526,4.047]],["title/classes/isEd25519.html",[39,0.106,198,1.053]],["body/classes/isEd25519.html",[3,0.261,4,0.261,5,0.227,7,0.261,8,0.825,12,0.042,14,0.667,17,0.825,20,0.667,21,1.273,22,0.335,23,0.468,25,0.916,26,0.586,29,0.297,38,0.761,39,0.173,40,0.916,42,1.504,43,1.805,44,1.726,49,0.018,50,0.018,72,0.42,80,1.265,81,1.577,85,0.667,94,1.57,98,0.642,99,0.742,100,0.578,103,1.517,104,1.572,121,0.795,123,0.642,125,2.071,130,0.713,132,1.262,137,1.406,138,1.018,139,1.947,140,1.568,141,1.406,142,1.858,149,0.795,156,0.713,173,1.265,196,1.018,197,0.642,198,1.414,199,1.139,205,1.57,206,0.825,211,1.746,215,0.514,220,0.795,223,1.57,235,1.746,237,0.795,252,1.746,253,2.02,254,1.946,275,1.858,277,1.601,280,1.168,281,1.168,283,1.296,304,2.252,312,0.795,318,1.568,319,0.795,320,1.262,321,1.262,338,0.795,373,0.795,376,1.568,433,2.181,434,0.891,435,2.523,438,2.523,439,2,441,2.599,442,2.321,443,2.717,444,2.599,445,2.663,446,0.891,447,2.599,448,1.414,449,1.757,450,0.891,451,0.891,452,0.891,453,1.414,454,0.891,455,1.414,456,0.891,457,0.891,458,1.414,459,0.891,460,0.891,461,0.891,462,0.891,463,0.891,464,0.891,465,0.891,466,0.891,467,0.891,468,1.757,469,0.891,470,0.891,471,0.891,472,0.891,473,0.891,474,1.414,475,0.891,476,0.891,477,0.891,478,0.891,479,0.891,480,0.891,481,0.891,482,0.891,483,0.891,484,0.891,485,0.891,486,0.891,487,1.414,488,0.891,489,0.891,490,0.891,491,0.891,492,0.891,493,0.891,527,1.637,528,1.637]],["title/classes/isNotMuxedAccount.html",[39,0.106,199,1.053]],["body/classes/isNotMuxedAccount.html",[3,0.262,4,0.262,5,0.228,7,0.262,8,0.828,12,0.042,14,0.669,17,0.828,20,0.669,21,1.276,22,0.336,23,0.47,25,0.919,26,0.587,29,0.298,38,0.762,39,0.174,40,0.919,42,1.507,43,1.806,44,1.728,49,0.018,50,0.018,72,0.422,80,1.268,81,1.579,85,0.669,94,1.573,98,0.644,99,0.745,100,0.58,103,1.519,104,1.582,121,0.799,125,1.951,130,0.716,132,1.266,137,1.41,138,0.644,139,1.861,140,1.266,141,1.135,142,1.605,149,0.799,156,0.716,173,1.268,196,1.021,197,0.644,198,1.3,199,1.3,205,1.573,206,0.828,211,1.749,215,0.516,220,0.799,223,1.573,235,1.749,237,0.799,252,1.749,253,2.023,254,1.951,275,1.861,277,1.605,280,1.17,281,1.17,283,1.3,304,2.255,312,0.799,318,1.573,319,0.799,320,1.266,321,1.266,338,0.799,373,0.799,376,1.573,433,2.005,434,0.895,435,2.527,438,2.437,439,2.186,441,2.666,442,2.325,443,2.72,444,2.809,445,2.666,446,0.895,447,2.603,448,0.895,449,1.762,450,0.895,451,0.895,452,0.895,453,1.419,454,0.895,455,1.419,456,0.895,457,0.895,458,1.419,459,0.895,460,0.895,461,0.895,462,0.895,463,0.895,464,0.895,465,0.895,466,0.895,467,0.895,468,1.762,469,0.895,470,0.895,471,0.895,472,0.895,473,0.895,474,1.419,475,0.895,476,0.895,477,0.895,478,0.895,479,0.895,480,0.895,481,0.895,482,0.895,483,0.895,484,0.895,485,0.895,486,0.895,487,1.419,488,0.895,489,0.895,490,0.895,491,0.895,492,0.895,493,0.895,529,1.644,530,1.644]],["title/injectables/isValidChallenge.html",[215,0.476,281,0.948]],["body/injectables/isValidChallenge.html",[3,0.257,4,0.257,5,0.223,7,0.257,8,0.814,12,0.042,14,0.819,17,0.814,20,0.934,21,1.345,22,0.524,23,0.733,25,1.126,26,0.58,29,0.292,38,0.757,39,0.172,40,0.904,42,1.493,43,1.801,44,1.717,49,0.017,50,0.017,72,0.413,80,1.251,81,1.675,85,0.819,94,1.557,98,0.631,99,0.733,100,0.568,103,1.546,104,1.567,108,0.782,123,0.631,125,1.93,130,0.701,132,1.245,137,1.586,138,0.631,139,1.844,140,1.245,141,1.116,142,1.586,149,0.782,156,0.701,173,1.426,196,1.004,197,0.631,198,1.284,199,1.126,205,1.557,206,0.814,211,1.731,215,0.509,216,0.701,220,0.782,222,0.876,223,1.805,235,1.731,237,0.782,252,1.731,253,2.069,254,1.93,275,1.844,277,1.586,280,1.156,281,1.263,283,1.284,304,2.238,312,0.782,318,1.551,319,0.782,320,1.245,321,1.245,338,0.782,373,0.782,376,1.551,433,2.163,434,0.876,435,2.508,438,2.585,439,2.163,441,2.649,442,2.304,443,2.649,444,2.585,445,2.585,446,0.876,447,2.508,448,0.876,449,1.738,450,0.876,451,0.876,452,0.876,453,1.395,454,0.876,455,1.395,456,0.876,457,0.876,458,1.395,459,0.876,460,0.876,461,0.876,462,0.876,463,1.395,464,1.395,465,1.395,466,0.876,467,0.876,468,1.738,469,0.876,470,0.876,471,0.876,472,0.876,473,0.876,474,1.395,475,0.876,476,0.876,477,0.876,478,0.876,479,0.876,480,0.876,481,0.876,482,0.876,483,0.876,484,0.876,485,0.876,486,0.876,487,1.395,488,0.876,489,0.876,490,0.876,491,0.876,492,0.876,493,0.876,531,1.609,532,1.609,533,1.609]],["title/classes/isXDR.html",[39,0.106,283,1.053]],["body/classes/isXDR.html",[3,0.259,4,0.259,5,0.225,7,0.259,8,0.82,12,0.042,14,0.663,17,0.82,20,0.663,21,1.268,22,0.333,23,0.465,25,0.911,26,0.583,29,0.295,38,0.759,39,0.173,40,0.911,42,1.499,43,1.804,44,1.722,49,0.018,50,0.018,72,0.417,80,1.259,81,1.572,85,0.663,94,1.665,98,0.637,99,0.738,100,0.573,103,1.583,104,1.548,121,0.79,123,0.637,125,1.939,130,0.708,132,1.254,137,1.594,138,0.637,139,1.941,140,1.254,141,1.125,142,1.594,149,0.79,156,0.708,173,1.434,196,1.012,197,0.637,198,1.291,199,1.133,205,1.564,206,0.82,211,1.739,215,0.512,220,0.79,223,1.564,235,1.739,237,0.79,252,1.739,253,2.075,254,1.939,275,1.852,277,1.594,280,1.163,281,1.163,283,1.408,304,2.246,312,0.79,318,1.561,319,0.79,320,1.254,321,1.254,338,0.79,373,0.79,376,1.561,433,2.173,434,0.885,435,2.517,438,2.593,439,2.173,441,2.657,442,2.313,443,2.712,444,2.801,445,2.657,446,0.885,447,2.593,448,0.885,449,1.749,450,0.885,451,0.885,452,0.885,453,1.749,454,0.885,455,1.992,456,0.885,457,0.885,458,1.405,459,0.885,460,0.885,461,0.885,462,0.885,463,0.885,464,0.885,465,0.885,466,0.885,467,0.885,468,1.749,469,0.885,470,0.885,471,0.885,472,0.885,473,0.885,474,1.405,475,0.885,476,0.885,477,0.885,478,0.885,479,0.885,480,0.885,481,0.885,482,0.885,483,0.885,484,0.885,485,0.885,486,0.885,487,1.405,488,0.885,489,0.885,490,0.885,491,0.885,492,0.885,493,0.885,534,1.625,535,1.625]],["title/license.html",[494,2.056,495,2.056,518,1.761]],["body/license.html",[12,0.032,49,0.032,50,0.032,63,1.998,160,3.012,168,3.801,171,3.012,370,3.012,404,3.012,509,3.012,510,3.012,511,3.012,518,2.579,519,4.165,520,3.012,521,3.012,536,3.668,537,4.63,538,3.668,539,3.668,540,3.668,541,3.668,542,3.668,543,3.668,544,4.63,545,5.816,546,3.668,547,3.668,548,3.668,549,5.074,550,3.668,551,4.63,552,3.668,553,3.668,554,3.668,555,3.668,556,3.668,557,3.668,558,3.668,559,3.668,560,3.668,561,4.63,562,3.668,563,3.668,564,3.668,565,3.668,566,3.668,567,3.668,568,3.668,569,4.63,570,4.63,571,3.668,572,3.668,573,3.668,574,3.668,575,3.668,576,3.668,577,3.668,578,3.668,579,3.668,580,3.668,581,3.668,582,3.668,583,3.668,584,3.668,585,3.668,586,3.668,587,3.668,588,3.668,589,3.668,590,3.668,591,3.668,592,3.668,593,3.668,594,3.668,595,3.668,596,3.668,597,3.668]],["title/modules.html",[53,1.965]],["body/modules.html",[12,0.036,49,0.036,50,0.036,52,2.775,53,2.194,58,2.458,59,2.458,157,3.415,598,5.553,599,5.553,600,5.553]],["title/overview.html",[601,3.32]],["body/overview.html",[2,2.098,12,0.04,33,2.126,49,0.033,50,0.033,52,3.631,53,1.873,54,2.321,55,3.163,56,3.163,57,3.163,58,3.194,59,3.136,60,2.364,61,2.936,62,2.369,63,2.098,113,3.163,114,3.163,115,2.825,121,1.873,216,1.679,278,3.163,279,3.163,280,1.649,281,1.649,601,3.163,602,3.854,603,3.854,604,3.854,605,3.854]],["title/miscellaneous/typealiases.html",[430,1.217,606,3.581]],["body/miscellaneous/typealiases.html",[7,0.668,12,0.04,22,1.186,34,3.533,49,0.034,50,0.034,78,2.947,102,3.924,104,1.632,106,3.924,217,2.947,327,2.947,430,2.037,607,4.192,608,5.026,609,4.192,610,5.026,611,5.708]],["title/miscellaneous/variables.html",[430,1.217,612,2.939]],["body/miscellaneous/variables.html",[7,0.728,12,0.038,49,0.036,50,0.036,122,3.211,127,3.717,138,1.79,173,1.79,206,1.452,207,3.75,430,2.22,612,3.75,613,4.568]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":376,"title":{},"body":{"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["0.1.13",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["0010",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"index.html":{}}}],["1.0.0",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":362,"title":{},"body":{"injectables/TokenService.html":{}}}],["10.0.0",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":378,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":603,"title":{},"body":{"overview.html":{}}}],["2/3",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":520,"title":{},"body":{"index.html":{},"license.html":{}}}],["3",{"_index":602,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":379,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":276,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["32",{"_index":187,"title":{},"body":{"classes/Challenge.html":{}}}],["4.0.0",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":605,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":382,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":604,"title":{},"body":{"overview.html":{}}}],["60",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["7.4.0",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":364,"title":{},"body":{"injectables/TokenService.html":{}}}],["9.0.1",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":568,"title":{},"body":{"license.html":{}}}],["accept",{"_index":242,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["account",{"_index":125,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["account'})@isbytelength(0",{"_index":186,"title":{},"body":{"classes/Challenge.html":{}}}],["action",{"_index":591,"title":{},"body":{"license.html":{}}}],["add",{"_index":268,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["added",{"_index":270,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["addition",{"_index":150,"title":{},"body":{"classes/Challenge.html":{}}}],["aliases",{"_index":607,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":559,"title":{},"body":{"license.html":{}}}],["apibearerauth",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["apiproperty",{"_index":189,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{}}}],["apiproperty({description",{"_index":129,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{}}}],["apipropertyoptional",{"_index":190,"title":{},"body":{"classes/Challenge.html":{}}}],["apipropertyoptional({description",{"_index":144,"title":{},"body":{"classes/Challenge.html":{}}}],["app.controller",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":595,"title":{},"body":{"license.html":{}}}],["assertion",{"_index":353,"title":{},"body":{"injectables/TokenService.html":{}}}],["associated",{"_index":546,"title":{},"body":{"license.html":{}}}],["assume",{"_index":172,"title":{},"body":{"classes/Challenge.html":{}}}],["async",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["attach",{"_index":179,"title":{},"body":{"classes/Challenge.html":{}}}],["auth",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["auth.controller",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.guard.ts",{"_index":285,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":77,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":135,"title":{},"body":{"classes/Challenge.html":{}}}],["authguard",{"_index":286,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":288,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":58,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":584,"title":{},"body":{"license.html":{}}}],["await",{"_index":237,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["backwards",{"_index":174,"title":{},"body":{"classes/Challenge.html":{}}}],["badrequestexception",{"_index":231,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["base64",{"_index":312,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["body",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":447,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["bootstrap",{"_index":392,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brault",{"_index":511,"title":{},"body":{"index.html":{},"license.html":{}}}],["browse",{"_index":600,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":598,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":455,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["c",{"_index":536,"title":{},"body":{"license.html":{}}}],["catch",{"_index":252,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["challenge",{"_index":85,"title":{"classes/Challenge.html":{}},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["challenge.account",{"_index":263,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.client_domain",{"_index":259,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.home_domain",{"_index":261,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.memo",{"_index":267,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge/challenge.service",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["challengeresponse",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"miscellaneous/typealiases.html":{}}}],["challengeservice",{"_index":60,"title":{"injectables/ChallengeService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"coverage.html":{},"overview.html":{}}}],["challengetx",{"_index":343,"title":{},"body":{"injectables/TokenService.html":{}}}],["charge",{"_index":541,"title":{},"body":{"license.html":{}}}],["check",{"_index":449,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["claim",{"_index":587,"title":{},"body":{"license.html":{}}}],["class",{"_index":39,"title":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"classes/isXDR.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["classes",{"_index":121,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"classes/isXDR.html":{},"overview.html":{}}}],["client",{"_index":130,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["client_domain",{"_index":126,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{}}}],["client_domain_signing_key",{"_index":236,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["clientaccount",{"_index":480,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccount.signers",{"_index":493,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccount.thresholds.high_threshold",{"_index":487,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccountid",{"_index":354,"title":{},"body":{"injectables/TokenService.html":{}}}],["clients",{"_index":147,"title":{},"body":{"classes/Challenge.html":{}}}],["clients'})@isin(['undefined'])@isfqdn()@isoptional",{"_index":177,"title":{},"body":{"classes/Challenge.html":{}}}],["cluster_appmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_customvalidatorsmodule",{"_index":278,"title":{},"body":{"modules/CustomValidatorsModule.html":{},"overview.html":{}}}],["cluster_customvalidatorsmodule_providers",{"_index":279,"title":{},"body":{"modules/CustomValidatorsModule.html":{},"overview.html":{}}}],["compatibility",{"_index":175,"title":{},"body":{"classes/Challenge.html":{}}}],["conditions",{"_index":567,"title":{},"body":{"license.html":{}}}],["config",{"_index":204,"title":{},"body":{"classes/Challenge.html":{}}}],["config/configuration",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["configmodule.forroot",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["configservice",{"_index":223,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["configservice.get('jwtsecret",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":596,"title":{},"body":{"license.html":{}}}],["const",{"_index":205,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["constructor",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{}}}],["constructor(configservice",{"_index":222,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{}}}],["constructor(private",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["contains",{"_index":463,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["content",{"_index":244,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["contract",{"_index":592,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["copies",{"_index":561,"title":{},"body":{"license.html":{}}}],["copy",{"_index":544,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":519,"title":{},"body":{"index.html":{},"license.html":{}}}],["coverage",{"_index":369,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["customvalidators",{"_index":200,"title":{},"body":{"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{},"classes/Token.html":{}}}],["customvalidators.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["customvalidatorsmodule",{"_index":59,"title":{"modules/CustomValidatorsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomValidatorsModule.html":{},"modules.html":{},"overview.html":{}}}],["cz",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["damages",{"_index":588,"title":{},"body":{"license.html":{}}}],["deal",{"_index":548,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":597,"title":{},"body":{"license.html":{}}}],["decode",{"_index":470,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["decodedtoken",{"_index":367,"title":{},"body":{"injectables/TokenService.html":{}}}],["decodedtokenresponse",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["decodes",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/TokenService.html":{}}}],["decodetoken(@request",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken(req",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken(token",{"_index":330,"title":{},"body":{"injectables/TokenService.html":{}}}],["decoding",{"_index":328,"title":{},"body":{"injectables/TokenService.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"classes/Token.html":{}}}],["default",{"_index":173,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":435,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["demo",{"_index":501,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":123,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["deserialize",{"_index":342,"title":{},"body":{"injectables/TokenService.html":{}}}],["disable",{"_index":347,"title":{},"body":{"injectables/TokenService.html":{}}}],["distribute",{"_index":557,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":370,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["domain",{"_index":145,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{}}}],["domains",{"_index":167,"title":{},"body":{"classes/Challenge.html":{}}}],["dotenv",{"_index":201,"title":{},"body":{"classes/Challenge.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":202,"title":{},"body":{"classes/Challenge.html":{}}}],["ed25519",{"_index":140,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["ed25519key",{"_index":446,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["encoded",{"_index":313,"title":{},"body":{"classes/Token.html":{}}}],["envelope",{"_index":453,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["enveloppe",{"_index":324,"title":{},"body":{"classes/Token.html":{}}}],["enveloppe!'})@validate(isvalidchallenge",{"_index":316,"title":{},"body":{"classes/Token.html":{}}}],["error",{"_index":253,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["eslint",{"_index":346,"title":{},"body":{"injectables/TokenService.html":{}}}],["eslint/no",{"_index":351,"title":{},"body":{"injectables/TokenService.html":{}}}],["event",{"_index":583,"title":{},"body":{"license.html":{}}}],["exists",{"_index":228,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["exp",{"_index":363,"title":{},"body":{"injectables/TokenService.html":{}}}],["expected",{"_index":464,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["export",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["express",{"_index":404,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":287,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["felix",{"_index":509,"title":{},"body":{"index.html":{},"license.html":{}}}],["fetch",{"_index":232,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["files",{"_index":547,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":579,"title":{},"body":{"license.html":{}}}],["following",{"_index":566,"title":{},"body":{"license.html":{}}}],["fpbrault",{"_index":513,"title":{},"body":{"index.html":{}}}],["free",{"_index":540,"title":{},"body":{"license.html":{}}}],["function",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":431,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":564,"title":{},"body":{"license.html":{}}}],["g",{"_index":131,"title":{},"body":{"classes/Challenge.html":{}}}],["generate",{"_index":164,"title":{},"body":{"classes/Challenge.html":{}}}],["generatechallenge",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generatechallenge(challenge",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generated",{"_index":524,"title":{},"body":{"index.html":{}}}],["generates",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generatetoken",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["generatetoken(@body",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetoken(token",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["generation",{"_index":219,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["generator",{"_index":526,"title":{},"body":{"index.html":{}}}],["get('profile",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["gets",{"_index":269,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getsigningkey",{"_index":221,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getsigningkey(client_domain",{"_index":226,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getting",{"_index":494,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["github",{"_index":512,"title":{},"body":{"index.html":{}}}],["give",{"_index":515,"title":{},"body":{"index.html":{}}}],["granted",{"_index":539,"title":{},"body":{"license.html":{}}}],["handles",{"_index":218,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["hasvalidsignatures",{"_index":280,"title":{"injectables/hasValidSignatures.html":{}},"body":{"modules/CustomValidatorsModule.html":{},"classes/Token.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"overview.html":{}}}],["headers",{"_index":241,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["helped",{"_index":517,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":538,"title":{},"body":{"license.html":{}}}],["high_threshold",{"_index":482,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["higher",{"_index":483,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["holders",{"_index":585,"title":{},"body":{"license.html":{}}}],["home",{"_index":163,"title":{},"body":{"classes/Challenge.html":{}}}],["home_domain",{"_index":127,"title":{},"body":{"classes/Challenge.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["homepage",{"_index":500,"title":{},"body":{"index.html":{}}}],["hopes",{"_index":170,"title":{},"body":{"classes/Challenge.html":{}}}],["https",{"_index":240,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["https://github.com/stellar/js",{"_index":271,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["iat",{"_index":360,"title":{},"body":{"injectables/TokenService.html":{}}}],["id",{"_index":182,"title":{},"body":{"classes/Challenge.html":{}}}],["identifier",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":169,"title":{},"body":{"classes/Challenge.html":{}}}],["ignore",{"_index":154,"title":{},"body":{"classes/Challenge.html":{}}}],["ignoreexpiration",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implementation",{"_index":499,"title":{},"body":{"index.html":{}}}],["implements",{"_index":445,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["implied",{"_index":575,"title":{},"body":{"license.html":{}}}],["import",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["imports",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["included",{"_index":160,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["including",{"_index":551,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["injectable",{"_index":215,"title":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{}},"body":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["injectables",{"_index":216,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{},"overview.html":{}}}],["input",{"_index":441,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["install",{"_index":502,"title":{},"body":{"index.html":{}}}],["installusage",{"_index":504,"title":{},"body":{"index.html":{}}}],["intend",{"_index":148,"title":{},"body":{"classes/Challenge.html":{}}}],["invalid",{"_index":341,"title":{},"body":{"injectables/TokenService.html":{}}}],["isbytelength",{"_index":191,"title":{},"body":{"classes/Challenge.html":{}}}],["isbytelength(0",{"_index":213,"title":{},"body":{"classes/Challenge.html":{}}}],["ised25519",{"_index":198,"title":{"classes/isEd25519.html":{}},"body":{"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["isfqdn",{"_index":192,"title":{},"body":{"classes/Challenge.html":{}}}],["isin",{"_index":193,"title":{},"body":{"classes/Challenge.html":{}}}],["isin([home_domain.hostname",{"_index":214,"title":{},"body":{"classes/Challenge.html":{}}}],["isnotmuxedaccount",{"_index":199,"title":{"classes/isNotMuxedAccount.html":{}},"body":{"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["isnumberstring",{"_index":194,"title":{},"body":{"classes/Challenge.html":{}}}],["isoptional",{"_index":195,"title":{},"body":{"classes/Challenge.html":{}}}],["iss",{"_index":356,"title":{},"body":{"injectables/TokenService.html":{}}}],["isvalidchallenge",{"_index":281,"title":{"injectables/isValidChallenge.html":{}},"body":{"modules/CustomValidatorsModule.html":{},"classes/Token.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"overview.html":{}}}],["isxdr",{"_index":283,"title":{"classes/isXDR.html":{}},"body":{"modules/CustomValidatorsModule.html":{},"classes/Token.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["javascript",{"_index":497,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":335,"title":{},"body":{"injectables/TokenService.html":{},"dependencies.html":{}}}],["jtw",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["jwt",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["jwt.decode(token.tostring",{"_index":368,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.jwtpayload",{"_index":337,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.sign(payload",{"_index":365,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.strategy",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":30,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":115,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":142,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["kind",{"_index":574,"title":{},"body":{"license.html":{}}}],["known/stellar.toml",{"_index":239,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["liability",{"_index":589,"title":{},"body":{"license.html":{}}}],["liable",{"_index":586,"title":{},"body":{"license.html":{}}}],["license",{"_index":518,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":522,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":552,"title":{},"body":{"license.html":{}}}],["limited",{"_index":576,"title":{},"body":{"license.html":{}}}],["line",{"_index":349,"title":{},"body":{"injectables/TokenService.html":{}}}],["literal",{"_index":611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":220,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["logger(challengeservice.name",{"_index":229,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["logger.error(error",{"_index":254,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["m",{"_index":133,"title":{},"body":{"classes/Challenge.html":{}}}],["matching",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":525,"title":{},"body":{"index.html":{}}}],["meet",{"_index":319,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["meets",{"_index":486,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["memberof",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["memo",{"_index":128,"title":{},"body":{"classes/Challenge.html":{}}}],["memonone",{"_index":336,"title":{},"body":{"injectables/TokenService.html":{}}}],["merchantability",{"_index":578,"title":{},"body":{"license.html":{}}}],["merge",{"_index":555,"title":{},"body":{"license.html":{}}}],["message",{"_index":137,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["metadata",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":245,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["miscellaneous",{"_index":430,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":521,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":554,"title":{},"body":{"license.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"modules.html":{},"overview.html":{}}}],["multiple",{"_index":166,"title":{},"body":{"classes/Challenge.html":{}}}],["muxed",{"_index":132,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["name",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["nestjs/config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["nestjs/core",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"classes/Challenge.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["network_passphrase",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["new",{"_index":206,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":348,"title":{},"body":{"injectables/TokenService.html":{}}}],["no_symbols",{"_index":210,"title":{},"body":{"classes/Challenge.html":{}}}],["node",{"_index":233,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["non",{"_index":352,"title":{},"body":{"injectables/TokenService.html":{}}}],["noninfringement",{"_index":582,"title":{},"body":{"license.html":{}}}],["notice",{"_index":569,"title":{},"body":{"license.html":{}}}],["null",{"_index":251,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["obtaining",{"_index":543,"title":{},"body":{"license.html":{}}}],["older",{"_index":176,"title":{},"body":{"classes/Challenge.html":{}}}],["operation",{"_index":344,"title":{},"body":{"injectables/TokenService.html":{}}}],["operation.source",{"_index":355,"title":{},"body":{"injectables/TokenService.html":{}}}],["operations",{"_index":465,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["optional",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["otherwise",{"_index":594,"title":{},"body":{"license.html":{}}}],["out",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":601,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":396,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["parameter",{"_index":155,"title":{},"body":{"classes/Challenge.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["parseint(transaction.timebounds.mintime",{"_index":361,"title":{},"body":{"injectables/TokenService.html":{}}}],["particular",{"_index":580,"title":{},"body":{"license.html":{}}}],["passport",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{}}}],["payload.sub",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":537,"title":{},"body":{"license.html":{}}}],["permit",{"_index":562,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":180,"title":{},"body":{"classes/Challenge.html":{}}}],["perron",{"_index":510,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":542,"title":{},"body":{"license.html":{}}}],["persons",{"_index":563,"title":{},"body":{"license.html":{}}}],["portions",{"_index":572,"title":{},"body":{"license.html":{}}}],["post",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["present",{"_index":434,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["previously",{"_index":333,"title":{},"body":{"injectables/TokenService.html":{}}}],["private",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["project",{"_index":516,"title":{},"body":{"index.html":{}}}],["promise",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["properties",{"_index":124,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{}}}],["provide",{"_index":484,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["provided",{"_index":171,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["providers",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["public",{"_index":141,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["publish",{"_index":556,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":581,"title":{},"body":{"license.html":{}}}],["query",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["readme",{"_index":523,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{}}}],["received",{"_index":471,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["reference",{"_index":498,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["relatedpropertyname",{"_index":458,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["relatedvalue",{"_index":460,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["relatedvalue.startswith('m",{"_index":462,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["representation",{"_index":473,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["req",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"classes/Challenge.html":{},"classes/Token.html":{}}}],["request.'})@isfqdn()@isoptional",{"_index":161,"title":{},"body":{"classes/Challenge.html":{}}}],["required",{"_index":320,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["reset",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"overview.html":{}}}],["response.text",{"_index":248,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["restriction",{"_index":550,"title":{},"body":{"license.html":{}}}],["results",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":476,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["return",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["returns",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["rights",{"_index":553,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":505,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["sdk",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["sdk/issues/668",{"_index":272,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["secretorkey",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":151,"title":{},"body":{"classes/Challenge.html":{}}}],["sell",{"_index":560,"title":{},"body":{"license.html":{}}}],["sep",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"index.html":{}}}],["server",{"_index":156,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["server.'})@validate(ised25519",{"_index":136,"title":{},"body":{"classes/Challenge.html":{}}}],["server.loadaccount(xdr.operations[0].source",{"_index":481,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["servers",{"_index":153,"title":{},"body":{"classes/Challenge.html":{}}}],["shall",{"_index":570,"title":{},"body":{"license.html":{}}}],["show",{"_index":514,"title":{},"body":{"index.html":{}}}],["signature",{"_index":478,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["signatures",{"_index":318,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["signed",{"_index":314,"title":{},"body":{"classes/Token.html":{}}}],["signing_key",{"_index":257,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["software",{"_index":545,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["specific",{"_index":159,"title":{},"body":{"classes/Challenge.html":{}}}],["src/.../auth.controller.ts",{"_index":608,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../challenge.service.ts",{"_index":609,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../challenge.ts",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":432,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../token.service.ts",{"_index":610,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/jwt",{"_index":284,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/challenge.ts",{"_index":122,"title":{},"body":{"classes/Challenge.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/challenge.ts:31",{"_index":143,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:43",{"_index":188,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:52",{"_index":178,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:60",{"_index":162,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge/challenge.service.ts",{"_index":217,"title":{},"body":{"injectables/ChallengeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/challenge/challenge.service.ts:22",{"_index":224,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:24",{"_index":230,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:33",{"_index":227,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:71",{"_index":225,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/customvalidators.module.ts",{"_index":282,"title":{},"body":{"modules/CustomValidatorsModule.html":{}}}],["src/customvalidators.ts",{"_index":373,"title":{},"body":{"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["src/customvalidators.ts:101",{"_index":530,"title":{},"body":{"classes/isNotMuxedAccount.html":{}}}],["src/customvalidators.ts:120",{"_index":529,"title":{},"body":{"classes/isNotMuxedAccount.html":{}}}],["src/customvalidators.ts:134",{"_index":531,"title":{},"body":{"injectables/isValidChallenge.html":{}}}],["src/customvalidators.ts:143",{"_index":533,"title":{},"body":{"injectables/isValidChallenge.html":{}}}],["src/customvalidators.ts:166",{"_index":532,"title":{},"body":{"injectables/isValidChallenge.html":{}}}],["src/customvalidators.ts:180",{"_index":436,"title":{},"body":{"injectables/hasValidSignatures.html":{}}}],["src/customvalidators.ts:189",{"_index":440,"title":{},"body":{"injectables/hasValidSignatures.html":{}}}],["src/customvalidators.ts:243",{"_index":437,"title":{},"body":{"injectables/hasValidSignatures.html":{}}}],["src/customvalidators.ts:26",{"_index":528,"title":{},"body":{"classes/isEd25519.html":{}}}],["src/customvalidators.ts:47",{"_index":527,"title":{},"body":{"classes/isEd25519.html":{}}}],["src/customvalidators.ts:69",{"_index":535,"title":{},"body":{"classes/isXDR.html":{}}}],["src/customvalidators.ts:87",{"_index":534,"title":{},"body":{"classes/isXDR.html":{}}}],["src/main.ts",{"_index":390,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/token.ts",{"_index":311,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/token.ts:29",{"_index":322,"title":{},"body":{"classes/Token.html":{}}}],["src/token/token.service.ts",{"_index":327,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/token/token.service.ts:27",{"_index":329,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:36",{"_index":332,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:70",{"_index":331,"title":{},"body":{"injectables/TokenService.html":{}}}],["started",{"_index":495,"title":{"index.html":{},"license.html":{}},"body":{}}],["startrun",{"_index":506,"title":{},"body":{"index.html":{}}}],["statements",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["stellar",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.muxedaccount.fromaddress(value",{"_index":451,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.networks.testnet",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["stellarsdk.operation",{"_index":339,"title":{},"body":{"injectables/TokenService.html":{}}}],["stellarsdk.server",{"_index":474,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.strkey.isvalided25519publickey(value",{"_index":452,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.transaction",{"_index":338,"title":{},"body":{"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.buildchallengetx",{"_index":273,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["stellarsdk.utils.gathertxsigners",{"_index":489,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.readchallengetx",{"_index":467,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.verifychallengetxsigners",{"_index":488,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.verifychallengetxthreshold",{"_index":492,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.xdr.transactionenvelope.validatexdr",{"_index":456,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["strategy",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{}}}],["sub",{"_index":357,"title":{},"body":{"injectables/TokenService.html":{}}}],["subject",{"_index":565,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":558,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":571,"title":{},"body":{"license.html":{}}}],["super",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["supplied",{"_index":146,"title":{},"body":{"classes/Challenge.html":{}}}],["support",{"_index":157,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"index.html":{},"modules.html":{}}}],["supported",{"_index":209,"title":{},"body":{"classes/Challenge.html":{}}}],["supported.'})@isoptional()@isnumberstring({no_symbols",{"_index":184,"title":{},"body":{"classes/Challenge.html":{}}}],["svg",{"_index":599,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["testauthor",{"_index":508,"title":{},"body":{"index.html":{}}}],["tests",{"_index":507,"title":{},"body":{"index.html":{}}}],["text",{"_index":247,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["text/plain",{"_index":243,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["then((data",{"_index":249,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["then((response",{"_index":246,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.challengeservice.generatechallenge(challenge",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('homedomain",{"_index":275,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.configservice.get('horizonserver",{"_index":475,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.configservice.get('jwtsecret",{"_index":366,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.configservice.get('networkpassphrase",{"_index":277,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.configservice.get('source.keypair",{"_index":274,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.configservice.get('source.keypair').publickey",{"_index":468,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.getsigningkey",{"_index":258,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_account",{"_index":262,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_domain",{"_index":265,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_domain_signing_key",{"_index":264,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('home_domain",{"_index":260,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('memo",{"_index":266,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.tokenservice.decodetoken(req.headers.authorization.slice(7",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["this.tokenservice.generatetoken(token",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["threshold",{"_index":321,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["thresholds",{"_index":477,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["throw",{"_index":255,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["todo",{"_index":203,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{}}}],["token",{"_index":19,"title":{"classes/Token.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["token.transaction",{"_index":340,"title":{},"body":{"injectables/TokenService.html":{}}}],["token/token.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["tokenresponse",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["tokens",{"_index":165,"title":{},"body":{"classes/Challenge.html":{}}}],["tokenservice",{"_index":33,"title":{"injectables/TokenService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/TokenService.html":{},"coverage.html":{},"overview.html":{}}}],["toml",{"_index":234,"title":{},"body":{"injectables/ChallengeService.html":{},"dependencies.html":{}}}],["toml.parse(data).signing_key",{"_index":250,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["tort",{"_index":593,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["transaction!'})@validate(hasvalidsignatures",{"_index":317,"title":{},"body":{"classes/Token.html":{}}}],["transaction.memo.type",{"_index":358,"title":{},"body":{"injectables/TokenService.html":{}}}],["transaction.memo.value",{"_index":359,"title":{},"body":{"injectables/TokenService.html":{}}}],["transaction.operations",{"_index":345,"title":{},"body":{"injectables/TokenService.html":{}}}],["transformer",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":211,"title":{},"body":{"classes/Challenge.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["true})@validate(isnotmuxedaccount",{"_index":185,"title":{},"body":{"classes/Challenge.html":{}}}],["try",{"_index":235,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["type",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":606,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":183,"title":{},"body":{"classes/Challenge.html":{}}}],["typescript",{"_index":350,"title":{},"body":{"injectables/TokenService.html":{}}}],["ui",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["unable",{"_index":256,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["unknown",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["url('/.well",{"_index":238,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["url(process.env.home_domain",{"_index":207,"title":{},"body":{"classes/Challenge.html":{},"miscellaneous/variables.html":{}}}],["urlencoded",{"_index":472,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["use",{"_index":168,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["used",{"_index":181,"title":{},"body":{"classes/Challenge.html":{}}}],["useguards",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@get('profile')@apibearerauth",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["userid",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["username",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid",{"_index":139,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate",{"_index":196,"title":{},"body":{"classes/Challenge.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate(hasvalidsignatures",{"_index":326,"title":{},"body":{"classes/Token.html":{}}}],["validate(input",{"_index":439,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate(ised25519",{"_index":208,"title":{},"body":{"classes/Challenge.html":{}}}],["validate(isnotmuxedaccount",{"_index":212,"title":{},"body":{"classes/Challenge.html":{}}}],["validate(isvalidchallenge",{"_index":325,"title":{},"body":{"classes/Token.html":{}}}],["validate(isxdr",{"_index":323,"title":{},"body":{"classes/Token.html":{}}}],["validate(payload",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(value",{"_index":448,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatechallenge",{"_index":466,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validated",{"_index":334,"title":{},"body":{"injectables/TokenService.html":{}}}],["validates",{"_index":433,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatesignatures",{"_index":469,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validation",{"_index":438,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments",{"_index":444,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments.constraints",{"_index":459,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments.constraints[0",{"_index":457,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments.object",{"_index":461,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validator",{"_index":197,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatorconstraint",{"_index":442,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatorconstraintinterface",{"_index":443,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["value",{"_index":138,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["value.startswith('m",{"_index":450,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["variable",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":612,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":158,"title":{},"body":{"classes/Challenge.html":{}}}],["verify",{"_index":149,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["verifying",{"_index":152,"title":{},"body":{"classes/Challenge.html":{}}}],["warranties",{"_index":577,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":573,"title":{},"body":{"license.html":{}}}],["weight",{"_index":485,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["weights",{"_index":479,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["welcome",{"_index":496,"title":{},"body":{"index.html":{}}}],["whether",{"_index":590,"title":{},"body":{"license.html":{}}}],["wishes",{"_index":134,"title":{},"body":{"classes/Challenge.html":{}}}],["without",{"_index":549,"title":{},"body":{"license.html":{}}}],["x.source",{"_index":491,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdr",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdr'})@validate(isxdr",{"_index":315,"title":{},"body":{"classes/Token.html":{}}}],["xdr.operations.map((x",{"_index":490,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdrtransaction",{"_index":454,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["yarn",{"_index":503,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n                    Decodes and returns the JWT token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Request } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { TokenService, DecodedTokenResponse } from './token/token.service';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly tokenService: TokenService) {}\n\n  /**\n   * Decodes and returns the JWT token\n   *\n   * @param {*} req\n   * @return {DecodedTokenResponse}\n   * @memberof AppController\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @ApiBearerAuth()\n  decodeToken(@Request() req: any): Promise {\n    return this.tokenService.decodeToken(req.headers.authorization.slice(7));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCustomValidatorsModule\n\nCustomValidatorsModule\n\nAppModule -->\n\nCustomValidatorsModule->AppModule\n\n\n\n\n\nChallengeService\n\nChallengeService\n\nAppModule -->\n\nChallengeService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChallengeService\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CustomValidatorsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { CustomValidatorsModule } from './CustomValidators.module';\nimport { ChallengeService } from './challenge/challenge.service';\nimport { TokenService } from './token/token.service';\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from './config/configuration';\n\n@Module({\n  imports: [\n    AuthModule,\n    CustomValidatorsModule,\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [ChallengeService, TokenService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateChallenge\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateChallenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateChallenge(challenge: Challenge)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n                    Generates a SEP-0010 challenge\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                Challenge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(token: Token)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                     generateToken takes a challenge XDR and returns a JTW token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Token\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Query, Post } from '@nestjs/common';\nimport * as StellarSdk from 'stellar-sdk';\nimport { ChallengeService } from '../challenge/challenge.service';\nimport { TokenService } from '../token/token.service';\nimport { Challenge } from '../challenge';\nimport { Token } from '../token';\nStellarSdk.Networks.TESTNET;\n\ntype ChallengeResponse =\n  | {\n      transaction: string;\n      network_passphrase: string;\n    }\n  | string;\n\ntype TokenResponse =\n  | {\n      token: string;\n    }\n  | string;\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly challengeService: ChallengeService,\n    private readonly tokenService: TokenService,\n  ) {}\n\n  /**\n   * Generates a SEP-0010 challenge\n   *\n   * @param {Challenge} challenge\n   * @return {Promise}\n   * @memberof AuthController\n   */\n  @Get()\n  async generateChallenge(\n    @Query() challenge: Challenge,\n  ): Promise {\n    return this.challengeService.generateChallenge(challenge);\n  }\n\n  /**\n   *  generateToken takes a challenge XDR and returns a JTW token.\n   *\n   * @param {Token} token\n   * @return {Promise}\n   * @memberof AuthController\n   */\n  @Post()\n  async generateToken(@Body() token: Token): Promise {\n    return this.tokenService.generateToken(token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nChallengeService\n\nChallengeService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nChallengeService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChallengeService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { ChallengeService } from '../challenge/challenge.service';\nimport { TokenService } from '../token/token.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [PassportModule, ConfigModule.forRoot()],\n  controllers: [AuthController],\n  providers: [ChallengeService, TokenService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Challenge.html":{"url":"classes/Challenge.html","title":"class - Challenge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Challenge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/challenge.ts\n        \n\n\n            \n                Description\n            \n            \n                SEP-0010 Challenge Request Parameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                account\n                            \n                            \n                                    Readonly\n                                    Optional\n                                client_domain\n                            \n                            \n                                    Readonly\n                                    Optional\n                                home_domain\n                            \n                            \n                                    Readonly\n                                    Optional\n                                memo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The Client Account, which can be a stellar account (G...) or muxed account (M...) that the Client wishes to authenticate with the Server.'})@Validate(isEd25519, {message: '($value) is not a valid Ed25519 Public Key!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        client_domain\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A Client Domain. Supplied by Clients that intend to verify their domain in addition to the Client Account. See Verifying the Client Domain. Servers should ignore this parameter if the Server does not support Client Domain verification, or the Server does not support verification for the specific Client Domain included in the request.'})@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        home_domain\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A Home Domain. Servers that generate tokens for multiple Home Domains can use this parameter to identify which home domain the Client hopes to authenticate with. If not provided by the Client, the Server should assume a default for backwards compatibility with older Clients'})@IsIn(['undefined'])@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        memo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The memo to attach to the challenge transaction. Only permitted if a Stellar account (G...) is used. The memo must be of type id. Other memo types are not supported.'})@IsOptional()@IsNumberString({no_symbols: true})@Validate(isNotMuxedAccount, ['account'], {message: 'Memo cannot be used with a muxed account'})@IsByteLength(0, 32)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsByteLength,\n  IsFQDN,\n  IsIn,\n  IsNumberString,\n  IsOptional,\n  Validate,\n} from 'class-validator';\nimport { isEd25519, isNotMuxedAccount } from './CustomValidators';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n// TODO: get home domain from config module\nconst HOME_DOMAIN = new URL(process.env.HOME_DOMAIN);\n\n/**\n * SEP-0010 Challenge Request Parameters\n *\n * @export\n * @class Challenge\n */\nexport class Challenge {\n  @ApiProperty({\n    description:\n      'The Client Account, which can be a stellar account (G...) or muxed account (M...) that the Client wishes to authenticate with the Server.',\n  })\n  @Validate(isEd25519, {\n    message: '($value) is not a valid Ed25519 Public Key!',\n  })\n  readonly account: string;\n\n  @ApiPropertyOptional({\n    description:\n      'The memo to attach to the challenge transaction. Only permitted if a Stellar account (G...) is used. The memo must be of type id. Other memo types are not supported.',\n  })\n  @IsOptional()\n  @IsNumberString({ no_symbols: true })\n  @Validate(isNotMuxedAccount, ['account'], {\n    message: 'Memo cannot be used with a muxed account',\n  })\n  @IsByteLength(0, 32)\n  readonly memo?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'A Home Domain. Servers that generate tokens for multiple Home Domains can use this parameter to identify which home domain the Client hopes to authenticate with. If not provided by the Client, the Server should assume a default for backwards compatibility with older Clients',\n  })\n  @IsIn([HOME_DOMAIN.hostname])\n  @IsFQDN()\n  @IsOptional()\n  readonly home_domain?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'A Client Domain. Supplied by Clients that intend to verify their domain in addition to the Client Account. See Verifying the Client Domain. Servers should ignore this parameter if the Server does not support Client Domain verification, or the Server does not support verification for the specific Client Domain included in the request.',\n  })\n  @IsFQDN()\n  @IsOptional()\n  readonly client_domain?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChallengeService.html":{"url":"injectables/ChallengeService.html","title":"injectable - ChallengeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChallengeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/challenge/challenge.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles SEP-0010 challenge generation\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateChallenge\n                            \n                            \n                                    Async\n                                getSigningKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/challenge/challenge.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateChallenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateChallenge(challenge: Challenge)\n                \n            \n\n\n            \n                \n                    Defined in src/challenge/challenge.service.ts:71\n                \n            \n\n\n            \n                \n                    Generates a SEP-0010 challenge\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                Challenge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSigningKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSigningKey(client_domain: string)\n                \n            \n\n\n            \n                \n                    Defined in src/challenge/challenge.service.ts:33\n                \n            \n\n\n            \n                \n                    Returns the public key of a client domain if it exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client_domain\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ChallengeService.name)\n                    \n                \n                    \n                        \n                                Defined in src/challenge/challenge.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { Challenge } from '../challenge';\nimport * as StellarSdk from 'stellar-sdk';\nimport fetch from 'node-fetch';\nimport * as toml from 'toml';\nimport { ConfigService } from '@nestjs/config';\n\nexport type ChallengeResponse =\n  | {\n      transaction: string;\n      network_passphrase: string;\n    }\n  | string;\n\n/**\n * Handles SEP-0010 challenge generation\n *\n * @export\n * @class ChallengeService\n */\n@Injectable()\nexport class ChallengeService {\n  constructor(private configService: ConfigService) {}\n  private readonly logger = new Logger(ChallengeService.name);\n\n  /**\n   * Returns the public key of a client domain if it exists\n   *\n   * @param {string} client_domain\n   * @return {Promise}\n   * @memberof ChallengeService\n   */\n  async getSigningKey(\n    client_domain: string,\n  ): Promise {\n    try {\n      const client_domain_signing_key = client_domain\n        ? await fetch(\n            new URL('/.well-known/stellar.toml', 'https://' + client_domain),\n            {\n              headers: {\n                Accept: 'text/plain',\n                'Content-Type': 'text/plain',\n              },\n              method: 'GET',\n            },\n          )\n            .then((response: { text: () => any }) => response.text())\n            .then((data: string) => {\n              if (toml.parse(data).SIGNING_KEY) {\n                return toml.parse(data).SIGNING_KEY;\n              }\n            })\n        : null;\n      return client_domain_signing_key;\n    } catch (error) {\n      Logger.error(error);\n      throw new BadRequestException(\n        \"Unable to fetch 'client_domain' SIGNING_KEY\",\n      );\n    }\n  }\n\n  /**\n   * Generates a SEP-0010 challenge\n   *\n   * @param {Challenge} challenge\n   * @return {Promise}\n   * @memberof ChallengeService\n   */\n  async generateChallenge(challenge: Challenge): Promise {\n    const client_domain_signing_key = await this.getSigningKey(\n      challenge.client_domain,\n    );\n\n    this.logger.debug('home_domain:' + challenge.home_domain);\n    this.logger.debug('client_account:' + challenge.account);\n    this.logger.debug('client_domain_signing_key:' + client_domain_signing_key);\n    this.logger.debug('client_domain:' + challenge.client_domain);\n    this.logger.debug('Memo: ' + challenge.memo);\n\n    // TODO: Add client_domain support when this gets added: https://github.com/stellar/js-stellar-sdk/issues/668\n    const transaction = StellarSdk.Utils.buildChallengeTx(\n      this.configService.get('source.keypair'),\n      challenge.account,\n      challenge.home_domain || this.configService.get('homeDomain'),\n      300,\n      this.configService.get('networkPassphrase'),\n      this.configService.get('homeDomain') + '/auth',\n      challenge.memo,\n    );\n\n    return {\n      transaction: transaction,\n      network_passphrase: this.configService.get('networkPassphrase'),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomValidatorsModule.html":{"url":"modules/CustomValidatorsModule.html","title":"module - CustomValidatorsModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomValidatorsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomValidatorsModule\n\n\n\ncluster_CustomValidatorsModule_providers\n\n\n\n\nhasValidSignatures\n\nhasValidSignatures\n\n\n\nCustomValidatorsModule\n\nCustomValidatorsModule\n\nCustomValidatorsModule -->\n\nhasValidSignatures->CustomValidatorsModule\n\n\n\n\n\nisValidChallenge\n\nisValidChallenge\n\nCustomValidatorsModule -->\n\nisValidChallenge->CustomValidatorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/CustomValidators.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            hasValidSignatures\n                        \n                        \n                            isValidChallenge\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {\n  isEd25519,\n  isNotMuxedAccount,\n  isValidChallenge,\n  isXDR,\n  hasValidSignatures,\n} from './CustomValidators';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n  providers: [\n    isEd25519,\n    isNotMuxedAccount,\n    isValidChallenge,\n    isXDR,\n    hasValidSignatures,\n  ],\n})\nexport class CustomValidatorsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('jwtSecret'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token.ts\n        \n\n\n            \n                Description\n            \n            \n                SEP-0010 Token Request Parameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                transaction\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        transaction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The base64 encoded signed challenge transaction XDR'})@Validate(isXDR, ['base64'], {message: 'Transaction is not a valid base64-encoded XDR transaction enveloppe!'})@Validate(isValidChallenge, {message: 'Transaction is not a valid challenge transaction!'})@Validate(hasValidSignatures, {message: 'Signatures are not valid or do not meet the required threshold!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/token.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Validate } from 'class-validator';\nimport {\n  hasValidSignatures,\n  isValidChallenge,\n  isXDR,\n} from './CustomValidators';\n\n/**\n * SEP-0010 Token Request Parameters\n *\n * @export\n * @class Token\n */\nexport class Token {\n  @ApiProperty({\n    description: 'The base64 encoded signed challenge transaction XDR',\n  })\n  @Validate(isXDR, ['base64'], {\n    message:\n      'Transaction is not a valid base64-encoded XDR transaction enveloppe!',\n  })\n  @Validate(isValidChallenge, {\n    message: 'Transaction is not a valid challenge transaction!',\n  })\n  @Validate(hasValidSignatures, {\n    message: 'Signatures are not valid or do not meet the required threshold!',\n  })\n  readonly transaction: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token/token.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles JWT token generation and decoding\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/token/token.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeToken(token: TokenResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/token/token.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                TokenResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(token: Token)\n                \n            \n\n\n            \n                \n                    Defined in src/token/token.service.ts:36\n                \n            \n\n\n            \n                \n                    generateToken takes a (previously validated) challenge XDR and returns a JTW token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Token\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Token } from '../token';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as jwt from 'jsonwebtoken';\nimport { MemoNone } from 'stellar-sdk';\nimport { ConfigService } from '@nestjs/config';\n\ntype TokenResponse =\n  | {\n      token: string;\n    }\n  | string;\n\nexport type DecodedTokenResponse =\n  | {\n      token: string | jwt.JwtPayload;\n    }\n  | string;\n\n/**\n * Handles JWT token generation and decoding\n *\n * @export\n * @class TokenService\n */\n@Injectable()\nexport class TokenService {\n  constructor(private configService: ConfigService) {}\n  /**\n   * generateToken takes a (previously validated) challenge XDR and returns a JTW token.\n   *\n   * @param {Token} token\n   * @return {Promise}\n   * @memberof TokenService\n   */\n  async generateToken(token: Token): Promise {\n    let transaction: StellarSdk.Transaction,\n      StellarSdk.Operation[]\n    >;\n    try {\n      transaction = new StellarSdk.Transaction(\n        token.transaction,\n        this.configService.get('networkPassphrase'),\n        true,\n      );\n    } catch {\n      throw new Error(\n        'Invalid challenge: unable to deserialize challengeTx transaction string',\n      );\n    }\n\n    const [operation] = transaction.operations;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const clientAccountID: string = operation.source!;\n    const payload = {\n      iss: this.configService.get('homeDomain') + '/auth',\n      sub:\n        transaction.memo.type !== MemoNone\n          ? clientAccountID + ':' + transaction.memo.value\n          : clientAccountID,\n      iat: parseInt(transaction.timeBounds.minTime, 10),\n      exp: parseInt(transaction.timeBounds.minTime, 10) + 86400,\n    };\n\n    return {\n      token: jwt.sign(payload, this.configService.get('jwtSecret')),\n    };\n  }\n  async decodeToken(token: TokenResponse): Promise {\n    const decodedToken = jwt.decode(token.toString());\n    return {\n      token: decodedToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isEd25519\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isNotMuxedAccount\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isXDR\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            injectable\n            hasValidSignatures\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            injectable\n            isValidChallenge\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/challenge.ts\n            \n            class\n            Challenge\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/challenge.ts\n            \n            variable\n            HOME_DOMAIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/challenge/challenge.service.ts\n            \n            injectable\n            ChallengeService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/token.ts\n            \n            class\n            Token\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                50 %\n                (2/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : 8.1.0\n        \n            @nestjs/config : ^1.0.2\n        \n            @nestjs/core : 8.1.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : 8.1.0\n        \n            @nestjs/swagger : 5.1.0\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            dotenv : ^10.0.0\n        \n            git-cz : 4.8.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            passport : ^0.5.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : 7.4.0\n        \n            stellar-sdk : 9.0.1\n        \n            swagger-ui-express : ^4.1.6\n        \n            toml : ^3.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/hasValidSignatures.html":{"url":"injectables/hasValidSignatures.html","title":"injectable - hasValidSignatures","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  hasValidSignatures\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the required signatures are present on the transaction\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/CustomValidators.ts:180\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:243\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(input: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:189\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain') + '/auth',\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nWelcome to stellar-sep-0010-server 👋\n\n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n\nJavaScript SEP-0010 Server Reference Implementation\n\n🏠 Homepage\n✨ Demo\nInstall\nyarn installUsage\nyarn run startRun tests\nyarn run testAuthor\n👤 Felix Perron-Brault\n\nGithub: @fpbrault\n\nShow your support\nGive a ⭐️ if this project helped you!\n📝 License\nCopyright © 2021 Felix Perron-Brault.\nThis project is MIT licensed.\n\nThis README was generated with ❤️ by readme-md-generator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isEd25519.html":{"url":"classes/isEd25519.html","title":"class - isEd25519","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isEd25519\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the account public key is a valid Ed25519 key\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:26\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain') + '/auth',\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isNotMuxedAccount.html":{"url":"classes/isNotMuxedAccount.html","title":"class - isNotMuxedAccount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isNotMuxedAccount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        {string}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(input: string, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain') + '/auth',\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/isValidChallenge.html":{"url":"injectables/isValidChallenge.html","title":"injectable - isValidChallenge","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  isValidChallenge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the challenge transaction contains the expected operations and other parameters\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/CustomValidators.ts:134\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:166\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(input: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:143\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain') + '/auth',\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isXDR.html":{"url":"classes/isXDR.html","title":"class - isXDR","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isXDR\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the transaction is a valid XDR transaction envelope\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:87\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(input: Buffer, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:69\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain') + '/auth',\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          this.configService.get('homeDomain'),\n          this.configService.get('homeDomain') + '/auth',\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Felix Perron-Brault\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomValidatorsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CustomValidatorsModule\n\n\n\ncluster_CustomValidatorsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCustomValidatorsModule\n\nCustomValidatorsModule\n\nAppModule -->\n\nCustomValidatorsModule->AppModule\n\n\n\n\n\nChallengeService\n\nChallengeService\n\nAuthModule -->\n\nChallengeService->AuthModule\n\n\n\nAppModule -->\n\nChallengeService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nhasValidSignatures\n\nhasValidSignatures\n\nCustomValidatorsModule -->\n\nhasValidSignatures->CustomValidatorsModule\n\n\n\n\n\nisValidChallenge\n\nisValidChallenge\n\nCustomValidatorsModule -->\n\nisValidChallenge->CustomValidatorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChallengeResponse   (src/.../auth.controller.ts)\n                        \n                        \n                            ChallengeResponse   (src/.../challenge.service.ts)\n                        \n                        \n                            DecodedTokenResponse   (src/.../token.service.ts)\n                        \n                        \n                            TokenResponse   (src/.../auth.controller.ts)\n                        \n                        \n                            TokenResponse   (src/.../token.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    ChallengeResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    src/challenge/challenge.service.ts\n    \n    \n        \n            \n                \n                    \n                    ChallengeResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    src/token/token.service.ts\n    \n    \n        \n            \n                \n                    \n                    DecodedTokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HOME_DOMAIN   (src/.../challenge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/challenge.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HOME_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new URL(process.env.HOME_DOMAIN)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
