var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.672,1,1.883]],["body/controllers/AppController.html",[0,2.346,1,2.969,2,1.579,3,0.546,4,0.546,5,0.419,6,2.639,7,0.546,8,1.393,9,5.104,10,3.509,11,2.642,12,0.04,13,4.263,14,3.206,15,1.03,16,3.509,17,1.136,18,3.206,19,1.507,20,1.136,21,3.206,22,3.206,23,3.206,24,4.263,25,2.346,26,1.889,27,0.854,28,1.048,29,0.947,30,4.789,31,1.54,32,0.905,33,3.206,34,2.266,35,3.206,36,0.616,37,1.987,38,3.206,39,3.206,40,1.915,41,3.013,42,1.987,43,4.263,44,1.987,45,1.731,46,0.69,47,0.546,48,0.154,49,1.421,50,3.013,51,1.765,52,1.159,53,1.565,54,1.159,55,3.206,56,3.206,57,3.206,58,3.206,59,2.639,60,3.206,61,3.206,62,4.263,63,2.639,64,2.639,65,2.639,66,2.266,67,1.282,68,2.639,69,2.266,70,1.282,71,1.987,72,3.206,73,0.028,74,0.028]],["title/modules/AppModule.html",[75,1.346,76,1.883]],["body/modules/AppModule.html",[1,3.161,2,2.286,3,0.622,4,0.622,5,0.478,12,0.04,32,0.992,36,0.701,40,2.263,42,2.264,46,0.785,47,0.622,48,0.175,73,0.03,74,0.03,75,2.056,76,3.713,77,1.799,78,2.056,79,3.006,80,3.006,81,3.006,82,3.115,83,3.115,84,2.508,85,2.876,86,2.264,87,1.799,88,3.652,89,3.279,90,3.279,91,3.652,92,3.652,93,3.652,94,2.581,95,2.581,96,3.819,97,3.652,98,2.581,99,3.652]],["title/controllers/AuthController.html",[0,1.672,100,1.883]],["body/controllers/AuthController.html",[0,1.676,2,1.5,3,0.519,4,0.519,5,0.398,7,0.519,8,1.345,11,2.552,12,0.04,15,1.075,17,1.097,19,1.476,20,1.391,26,2.584,27,1.097,28,1.345,29,1.216,31,1.945,32,0.917,36,0.584,40,1.866,42,1.887,47,0.519,48,0.146,49,1.349,50,2.91,51,2.266,52,1.488,53,1.633,54,1.488,66,2.152,71,1.887,73,0.027,74,0.027,84,2.068,94,2.152,100,3.098,101,2.152,102,3.044,103,1.945,104,3.841,105,4.115,106,2.506,107,1.407,108,3.044,109,3.389,110,2.266,111,2.266,112,2.506,113,4.665,114,3.044,115,3.389,116,1.488,117,3.389,118,3.044,119,4.117,120,1.217,121,0.811,122,0.995,123,3.044,124,2.152,125,0.995,126,2.152,127,3.044,128,3.044,129,3.044,130,3.044]],["title/modules/AuthModule.html",[75,1.346,82,1.672]],["body/modules/AuthModule.html",[2,2.342,3,0.647,4,0.647,5,0.497,12,0.04,32,0.988,36,0.729,40,2.286,42,2.353,46,0.817,47,0.647,48,0.182,73,0.031,74,0.031,75,2.107,77,1.87,78,2.107,82,3.279,84,2.533,85,2.947,86,2.353,87,1.87,89,3.361,90,2.684,94,2.684,95,2.684,98,2.684,100,3.218,131,3.125,132,3.125,133,3.146,134,3.796,135,3.796,136,3.796,137,4.754,138,2.353]],["title/classes/Challenge.html",[48,0.146,107,0.729]],["body/classes/Challenge.html",[3,0.398,4,0.398,5,0.306,7,0.398,11,2.756,12,0.039,15,1.063,17,1.184,20,1.394,27,0.91,29,1.459,32,0.757,34,2.856,44,1.448,47,0.582,48,0.194,51,3.061,73,0.022,74,0.022,75,1.035,107,1.224,110,1.881,111,1.881,121,1.184,125,1.117,139,1.151,140,1.651,141,1.891,142,2.415,143,2.544,144,2.505,145,2.756,146,5.498,147,1.923,148,2.572,149,4.445,150,2.19,151,3.417,152,3.417,153,4.445,154,2.336,155,1.97,156,1.235,157,1.366,158,1.684,159,1.514,160,1.366,161,2.336,162,4.04,163,4.032,164,3.417,165,4.04,166,3.417,167,1.684,168,3.417,169,2.813,170,3.417,171,4.445,172,3.417,173,4.445,174,2.262,175,2.756,176,4.445,177,3.417,178,2.813,179,2.336,180,2.336,181,4.202,182,2.813,183,3.417,184,3.417,185,3.417,186,2.415,187,3.417,188,3.417,189,2.813,190,3.417,191,1.366,192,3.417,193,3.417,194,3.417,195,2.336,196,2.336,197,3.417,198,3.417,199,4.445,200,3.417,201,3.417,202,2.336,203,2.336,204,2.336,205,3.417,206,2.336,207,2.813,208,4.445,209,2.336,210,4.04,211,2.336,212,3.417,213,4.445,214,0.844,215,0.934,216,0.844,217,0.844,218,1.651,219,2.813,220,2.336,221,2.336,222,2.336,223,0.934,224,1.923,225,2.336,226,2.336,227,2.336,228,1.035,229,2.336,230,2.336,231,2.336]],["title/injectables/ChallengeService.html",[84,1.346,232,0.518]],["body/injectables/ChallengeService.html",[3,0.403,4,0.403,5,0.309,7,0.403,8,1.126,12,0.04,15,1.022,16,2.837,17,1.191,19,1.32,20,1.399,27,1.084,28,1.329,29,1.201,31,1.793,32,0.845,36,0.454,45,1.793,46,0.508,47,0.693,48,0.166,49,1.047,50,2.875,51,2.239,52,1.245,53,1.553,54,1.245,59,1.946,65,2.837,66,2.436,67,1.626,69,1.671,70,1.787,73,0.022,74,0.022,84,2.106,103,1.793,104,2.837,106,2.837,107,1.337,109,2.837,110,2.461,111,2.461,120,0.945,121,0.63,122,0.772,124,1.671,125,1.621,141,0.945,142,2.436,144,3.175,148,1.527,156,0.854,159,1.527,160,1.378,163,2.436,191,0.945,223,1.378,232,0.587,233,1.047,234,1.671,235,2.837,236,2.837,237,2.202,238,4.067,239,1.301,240,2.363,241,2.363,242,2.363,243,2.363,244,3.446,245,1.9,246,3.446,247,2.363,248,4.067,249,4.752,250,2.363,251,2.436,252,0.945,253,1.047,254,4.47,255,1.698,256,2.363,257,2.363,258,2.363,259,1.946,260,2.363,261,2.363,262,2.363,263,2.363,264,2.363,265,3.446,266,2.837,267,2.837,268,1.946,269,1.047,270,0.945,271,1.164,272,2.363,273,4.47,274,2.363,275,4.067,276,2.363,277,4.067,278,2.363,279,2.363,280,2.363,281,4.067,282,3.446,283,3.446,284,3.446,285,2.363]],["title/modules/CustomValidatorsModule.html",[75,1.346,83,1.672]],["body/modules/CustomValidatorsModule.html",[3,0.685,4,0.685,5,0.526,12,0.039,32,0.908,36,0.772,46,0.865,47,0.685,48,0.193,73,0.032,74,0.032,75,2.184,77,1.981,78,2.184,83,3.263,85,3.054,86,2.493,87,1.981,89,3.483,90,2.843,95,2.843,98,2.843,216,1.781,217,1.781,218,2.843,286,3.311,287,3.311,288,1.894,289,1.894,290,4.021,291,1.781]],["title/injectables/JwtAuthGuard.html",[37,1.883,232,0.518]],["body/injectables/JwtAuthGuard.html",[3,0.765,4,0.765,5,0.587,12,0.039,32,0.896,36,0.862,37,3.262,47,0.765,48,0.216,73,0.034,74,0.034,138,2.781,232,0.896,233,1.989,292,3.694,293,3.694,294,4.487,295,3.694,296,4.487]],["title/injectables/JwtStrategy.html",[133,1.672,232,0.518]],["body/injectables/JwtStrategy.html",[3,0.645,4,0.645,5,0.495,7,0.645,8,1.551,12,0.04,15,1.021,17,1.265,19,1.118,25,2.085,27,1.265,28,1.551,29,1.402,32,0.926,36,0.727,45,2.064,46,0.815,47,0.645,48,0.182,49,1.679,53,1.238,73,0.031,74,0.031,103,1.874,133,2.613,138,2.348,214,1.716,232,0.809,233,1.679,239,2.085,252,1.515,295,3.118,297,3.118,298,3.788,299,4.747,300,3.788,301,3.118,302,3.788,303,3.788,304,3.788,305,3.118,306,3.788,307,3.788,308,3.788,309,3.788,310,3.788,311,3.788,312,1.866,313,3.788,314,3.788,315,3.788,316,3.788,317,3.788,318,3.788]],["title/classes/Token.html",[26,1.346,48,0.146]],["body/classes/Token.html",[3,0.59,4,0.59,5,0.453,7,0.59,11,2.148,12,0.04,15,0.745,17,0.923,20,1.195,26,2.415,27,1.195,32,0.848,34,3.171,44,2.148,47,0.764,48,0.239,51,2.738,73,0.029,74,0.029,107,1.262,110,2.469,111,2.469,116,1.798,125,1.943,139,1.707,141,1.794,142,3.171,147,2.853,155,2.474,157,2.232,207,3.693,214,1.252,215,1.386,218,2.449,288,1.132,289,1.132,291,1.252,319,2.853,320,2.75,321,5.261,322,4.486,323,3.465,324,3.465,325,3.465,326,2.21,327,2.21,328,2.21,329,2.21,330,3.465,331,3.465,332,3.465,333,3.465,334,3.465]],["title/injectables/TokenService.html",[40,1.215,232,0.518]],["body/injectables/TokenService.html",[3,0.411,4,0.411,5,0.316,7,0.411,8,1.143,10,2.88,12,0.04,15,1.031,17,1.096,19,1.333,20,1.331,25,2.265,26,2.571,27,1.096,28,1.345,29,1.215,31,1.732,32,0.851,36,0.463,40,1.805,41,1.705,45,1.806,46,0.519,47,0.701,48,0.168,49,1.069,52,0.872,53,1.345,54,0.872,67,0.965,69,2.473,70,1.399,71,2.168,73,0.023,74,0.023,103,1.806,105,3.716,107,0.987,112,2.88,115,2.88,116,1.264,117,2.88,120,0.965,121,0.932,122,1.143,125,1.345,126,3.19,141,0.965,144,3.097,223,1.916,228,1.069,232,0.596,233,1.069,235,2.88,236,2.88,239,1.328,245,1.399,252,0.965,253,1.069,266,1.986,267,1.986,268,2.88,269,1.069,270,0.965,301,1.986,335,1.705,336,3.498,337,2.412,338,3.498,339,2.412,340,2.412,341,3.498,342,3.498,343,1.705,344,4.115,345,2.412,346,1.723,347,2.412,348,1.189,349,2.412,350,2.412,351,3.498,352,2.412,353,2.412,354,2.412,355,2.412,356,2.412,357,2.412,358,2.412,359,2.412,360,2.412,361,2.412,362,2.412,363,2.412,364,2.412,365,2.412,366,2.412,367,2.412,368,4.791,369,2.412,370,1.986,371,3.498,372,3.498,373,3.498,374,3.498,375,3.498,376,4.513,377,4.513,378,3.498,379,3.498,380,2.412,381,2.412,382,2.412,383,3.498,384,2.412]],["title/changelog.html",[385,1.805,386,1.805,387,2.103]],["body/changelog.html",[2,1.705,5,0.534,12,0.04,19,1.022,25,2.467,26,2.203,46,0.744,63,1.957,64,2.849,68,2.849,71,2.145,73,0.022,74,0.022,78,1.534,87,1.705,96,2.849,107,1.192,116,1.251,121,1.194,122,1.131,143,1.534,144,2.778,145,2.145,156,0.859,157,1.384,160,1.905,163,2.446,169,1.957,175,2.145,181,3.69,182,1.957,186,2.446,214,1.251,251,2.446,259,2.849,270,1.384,343,2.446,370,2.849,387,1.957,388,2.377,389,2.377,390,1.957,391,2.377,392,2.377,393,2.377,394,2.377,395,2.446,396,3.461,397,2.849,398,3.461,399,3.461,400,3.461,401,3.461,402,5.679,403,3.461,404,3.461,405,3.461,406,3.461,407,3.461,408,3.461,409,3.461,410,3.461,411,3.461,412,3.461,413,4.081,414,3.461,415,4.482,416,3.461,417,2.849,418,3.461,419,4.482,420,4.482,421,3.461,422,3.461,423,3.461,424,2.377,425,2.377,426,3.461,427,2.591,428,3.461,429,3.461,430,3.461,431,3.461,432,3.461,433,1.705,434,4.763,435,1.705,436,3.461,437,4.482,438,3.461,439,3.461,440,3.461,441,3.461,442,3.461,443,3.461,444,3.461,445,3.461,446,3.461,447,3.461,448,4.763,449,3.461,450,1.705,451,3.461,452,3.461,453,3.461,454,3.461,455,3.461,456,4.081,457,3.461,458,3.461,459,2.377,460,2.377,461,2.377,462,3.461,463,2.377,464,3.461,465,2.849,466,3.461,467,3.461,468,4.763,469,3.461,470,3.461,471,3.461,472,3.461,473,3.461,474,2.377,475,2.377,476,2.377,477,3.461,478,3.461,479,3.461]],["title/coverage.html",[480,3.385]],["body/coverage.html",[0,2.579,1,2.3,5,0.485,6,3.054,12,0.039,15,0.798,26,1.644,37,2.3,40,1.483,48,0.267,73,0.03,74,0.03,84,1.644,100,2.3,101,2.622,107,0.89,133,2.042,140,3.312,145,2.3,216,1.341,217,1.341,232,0.968,234,2.622,245,1.483,288,1.212,289,1.212,291,1.341,292,3.054,293,3.054,297,3.054,319,3.054,335,2.622,397,3.054,480,3.054,481,3.054,482,3.71,483,3.71,484,2.741,485,4.686,486,4.686,487,2.741,488,4.686,489,3.71,490,3.71,491,4.686,492,4.686,493,3.71,494,3.71,495,5.136,496,3.71,497,3.71,498,3.71,499,3.71,500,3.054,501,3.71,502,3.054,503,4.686,504,3.71,505,3.71,506,3.71,507,3.71]],["title/dependencies.html",[78,1.615,508,2.554]],["body/dependencies.html",[12,0.04,25,2.1,36,0.732,44,2.364,46,0.82,48,0.229,73,0.031,74,0.031,78,1.69,121,1.016,122,1.246,138,2.364,215,1.525,219,3.14,251,2.696,305,4.283,343,2.696,417,3.14,509,5.202,510,3.814,511,3.814,512,3.814,513,3.814,514,3.814,515,3.814,516,3.926,517,3.814,518,3.814,519,3.814,520,3.814,521,3.814,522,3.814,523,3.814,524,3.814,525,3.814,526,3.814,527,3.814,528,3.814,529,3.814,530,3.814,531,3.814,532,3.814,533,3.814,534,3.814,535,3.814,536,3.814,537,3.814,538,3.814,539,3.814,540,3.814,541,3.814,542,3.814,543,3.814,544,3.814,545,3.814,546,3.814,547,3.814,548,3.814,549,3.814,550,3.814]],["title/miscellaneous/functions.html",[551,1.258,552,3]],["body/miscellaneous/functions.html",[7,0.8,12,0.035,73,0.035,74,0.035,500,3.864,502,4.682,551,2.313,552,3.864,553,4.694]],["title/injectables/hasValidSignatures.html",[232,0.518,288,0.993]],["body/injectables/hasValidSignatures.html",[3,0.288,4,0.288,5,0.221,7,0.288,8,0.873,12,0.041,15,0.575,17,0.882,19,0.789,20,1.489,27,0.882,28,1.423,29,0.789,31,1.197,32,0.641,36,0.325,45,1.708,46,0.364,47,0.829,48,0.239,49,0.749,52,1.574,53,1.885,54,1.801,67,1.504,70,1.324,73,0.017,74,0.017,103,1.759,107,0.641,116,1.481,120,0.676,121,0.712,122,0.553,125,1.628,141,0.676,143,1.816,148,0.749,150,1.316,155,1.667,156,0.611,157,1.741,158,1.316,159,1.184,160,1.504,167,0.833,174,0.749,191,1.504,214,0.965,215,0.676,216,1.36,217,1.197,223,1.741,228,1.93,232,0.564,233,0.749,237,0.833,239,0.931,245,1.068,252,1.068,253,1.816,255,0.833,269,1.816,270,1.946,271,2.018,288,1.339,289,1.229,291,1.36,312,2.329,320,0.833,326,1.854,327,0.833,328,1.632,329,1.316,346,0.833,348,1.316,427,2.397,433,0.833,435,1.316,450,1.632,484,0.833,487,1.632,554,2.255,555,2.602,556,1.691,557,1.691,558,2.255,559,1.691,560,2.743,561,2.397,562,2.743,563,2.679,564,2.679,565,0.931,566,2.602,567,0.931,568,0.931,569,0.931,570,0.931,571,1.471,572,0.931,573,0.931,574,0.931,575,1.471,576,0.931,577,0.931,578,0.931,579,0.931,580,0.931,581,0.931,582,0.931,583,0.931,584,0.931,585,1.823,586,0.931,587,0.931,588,0.931,589,0.931,590,0.931,591,1.471,592,0.931,593,0.931,594,0.931,595,0.931,596,0.931,597,0.931,598,2.255,599,0.931,600,0.931,601,0.931,602,0.931,603,0.931,604,1.471,605,0.931,606,0.931,607,0.931,608,0.931,609,0.931,610,0.931]],["title/index.html",[7,0.435,385,1.805,386,1.805]],["body/index.html",[12,0.039,73,0.032,74,0.032,110,2.758,111,2.758,121,1.101,174,2.22,175,2.563,390,4.125,395,2.922,611,4.134,612,4.134,613,4.134,614,4.134,615,4.134,616,4.134,617,4.134,618,5.391,619,4.134,620,5.01,621,4.134,622,4.134,623,4.134,624,4.125,625,4.125,626,4.125,627,4.134,628,4.134,629,4.134,630,4.134,631,4.134,632,2.922,633,3.403,634,3.403,635,4.134,636,5.01,637,4.134,638,4.134,639,4.134]],["title/classes/isEd25519.html",[48,0.146,216,1.098]],["body/classes/isEd25519.html",[3,0.292,4,0.292,5,0.224,7,0.292,8,0.883,12,0.041,15,0.369,17,0.72,19,0.798,20,1.492,27,0.72,28,1.348,29,0.507,31,0.977,32,0.646,36,0.329,45,1.491,46,0.369,47,0.833,48,0.24,52,1.584,53,1.889,54,1.809,67,1.517,70,1.337,73,0.017,74,0.017,103,1.657,107,0.648,116,1.491,120,0.686,121,0.72,122,0.561,125,1.597,139,0.845,141,0.686,143,1.942,148,0.76,150,1.331,155,1.482,156,0.977,157,1.834,158,1.647,159,1.482,160,1.752,167,0.845,174,0.76,191,1.337,214,0.977,215,0.686,216,1.491,217,1.208,223,1.752,228,1.942,232,0.57,237,0.845,245,1.081,252,1.081,253,1.828,255,0.845,269,1.828,270,1.9,271,2.033,288,1.239,289,1.239,291,1.371,312,2.341,320,0.845,326,1.647,327,0.845,328,1.331,329,1.331,346,0.845,348,1.331,427,2.341,433,0.845,435,0.845,450,1.647,484,0.845,487,1.647,554,2.271,555,2.616,558,2.088,560,2.691,561,2.412,562,2.809,563,2.691,564,2.755,565,0.945,566,2.691,567,1.488,568,0.945,569,0.945,570,0.945,571,1.488,572,0.945,573,0.945,574,0.945,575,1.488,576,0.945,577,0.945,578,0.945,579,0.945,580,0.945,581,0.945,582,0.945,583,0.945,584,0.945,585,1.84,586,0.945,587,0.945,588,0.945,589,0.945,590,0.945,591,1.488,592,0.945,593,0.945,594,0.945,595,0.945,596,0.945,597,0.945,598,2.271,599,0.945,600,0.945,601,0.945,602,0.945,603,0.945,604,1.488,605,0.945,606,0.945,607,0.945,608,0.945,609,0.945,610,0.945,640,1.716,641,1.716]],["title/classes/isNotMuxedAccount.html",[48,0.146,217,1.098]],["body/classes/isNotMuxedAccount.html",[3,0.294,4,0.294,5,0.225,7,0.294,8,0.886,12,0.041,15,0.371,17,0.722,19,0.801,20,1.502,27,0.722,28,1.351,29,0.509,31,0.98,32,0.648,36,0.331,45,1.494,46,0.371,47,0.834,48,0.241,52,1.587,53,1.89,54,1.811,67,1.52,70,1.341,73,0.018,74,0.018,103,1.66,107,0.65,116,1.494,120,0.689,121,0.722,122,0.563,125,1.6,139,0.849,143,1.832,148,0.764,150,1.336,155,1.486,156,0.623,157,1.756,158,1.336,159,1.202,160,1.52,167,0.849,174,0.764,191,1.341,214,0.98,215,0.689,216,1.374,217,1.374,223,1.756,228,1.946,232,0.571,237,0.849,245,1.084,252,1.084,253,1.832,255,0.849,269,1.832,270,1.903,271,2.037,288,1.242,289,1.242,291,1.374,312,2.344,320,0.849,326,1.652,327,0.849,328,1.336,329,1.336,346,0.849,348,1.336,427,2.263,433,0.849,435,0.849,450,1.652,484,0.849,487,1.652,554,2.093,555,2.619,558,2.276,560,2.758,561,2.417,562,2.813,563,2.9,564,2.758,565,0.949,566,2.695,567,0.949,568,0.949,569,0.949,570,0.949,571,1.493,572,0.949,573,0.949,574,0.949,575,1.493,576,0.949,577,0.949,578,0.949,579,0.949,580,0.949,581,0.949,582,0.949,583,0.949,584,0.949,585,1.845,586,0.949,587,0.949,588,0.949,589,0.949,590,0.949,591,1.493,592,0.949,593,0.949,594,0.949,595,0.949,596,0.949,597,0.949,598,2.276,599,0.949,600,0.949,601,0.949,602,0.949,603,0.949,604,1.493,605,0.949,606,0.949,607,0.949,608,0.949,609,0.949,610,0.949,642,1.723,643,1.723]],["title/injectables/isValidChallenge.html",[232,0.518,289,0.993]],["body/injectables/isValidChallenge.html",[3,0.288,4,0.288,5,0.221,7,0.288,8,0.871,12,0.041,15,0.574,17,0.881,19,0.788,20,1.488,27,1.001,28,1.422,29,0.788,31,1.195,32,0.64,36,0.324,45,1.707,46,0.363,47,0.829,48,0.239,49,0.748,52,1.572,53,1.885,54,1.8,67,1.503,70,1.322,73,0.017,74,0.017,103,1.757,107,0.793,116,1.479,120,0.675,121,0.711,122,0.551,125,1.627,141,0.675,143,1.814,148,0.748,150,1.314,155,1.665,156,0.61,157,1.74,158,1.314,159,1.182,160,1.503,167,0.831,174,0.748,191,1.503,214,0.964,215,0.675,216,1.358,217,1.195,223,1.74,228,1.928,232,0.563,233,0.748,237,0.831,239,0.929,245,1.066,252,1.066,253,1.814,255,0.831,269,1.814,270,1.945,271,2.016,288,1.228,289,1.337,291,1.358,312,2.327,320,0.831,326,1.629,327,0.831,328,1.314,329,1.314,346,0.831,348,1.314,427,2.396,433,0.831,435,0.831,450,1.629,484,0.831,487,1.629,554,2.253,555,2.6,558,2.253,560,2.741,561,2.395,562,2.741,563,2.677,564,2.677,565,0.929,566,2.6,567,0.929,568,0.929,569,0.929,570,0.929,571,1.468,572,0.929,573,0.929,574,0.929,575,1.468,576,0.929,577,0.929,578,0.929,579,0.929,580,1.468,581,1.468,582,1.468,583,0.929,584,0.929,585,1.82,586,0.929,587,0.929,588,0.929,589,0.929,590,0.929,591,1.468,592,0.929,593,0.929,594,0.929,595,0.929,596,0.929,597,0.929,598,2.253,599,0.929,600,0.929,601,0.929,602,0.929,603,0.929,604,1.468,605,0.929,606,0.929,607,0.929,608,0.929,609,0.929,610,0.929,644,1.687,645,1.687,646,1.687]],["title/classes/isXDR.html",[48,0.146,291,1.098]],["body/classes/isXDR.html",[3,0.29,4,0.29,5,0.223,7,0.29,8,0.878,12,0.041,15,0.366,17,0.716,19,0.793,20,1.471,27,0.716,28,1.343,29,0.503,31,0.971,32,0.644,36,0.327,45,1.486,46,0.366,47,0.831,48,0.24,52,1.579,53,1.887,54,1.805,67,1.511,70,1.33,73,0.017,74,0.017,103,1.653,107,0.644,116,1.579,120,0.681,121,0.716,122,0.557,125,1.664,139,0.839,141,0.681,143,1.822,148,0.755,150,1.324,155,1.674,156,0.616,157,1.829,158,1.324,159,1.191,160,1.511,167,0.839,174,0.755,191,1.511,214,0.971,215,0.681,216,1.365,217,1.202,223,1.747,228,1.936,232,0.567,237,0.839,245,1.074,252,1.074,253,1.822,255,0.839,269,1.822,270,1.95,271,2.026,288,1.234,289,1.234,291,1.486,312,2.335,320,0.839,326,1.639,327,0.839,328,1.324,329,1.324,346,0.839,348,1.861,427,2.403,433,0.839,435,0.839,450,1.639,484,0.839,487,1.639,554,2.263,555,2.609,558,2.263,560,2.749,561,2.405,562,2.804,563,2.892,564,2.749,565,0.938,566,2.685,567,0.938,568,0.938,569,0.938,570,0.938,571,1.832,572,0.938,573,0.938,574,0.938,575,1.479,576,0.938,577,0.938,578,0.938,579,0.938,580,0.938,581,0.938,582,0.938,583,0.938,584,0.938,585,1.832,586,0.938,587,0.938,588,0.938,589,0.938,590,0.938,591,1.479,592,0.938,593,0.938,594,0.938,595,0.938,596,0.938,597,0.938,598,2.263,599,0.938,600,0.938,601,0.938,602,0.938,603,0.938,604,1.479,605,0.938,606,0.938,607,0.938,608,0.938,609,0.938,610,0.938,647,1.703,648,1.703]],["title/license.html",[385,1.805,386,1.805,632,1.805]],["body/license.html",[12,0.031,73,0.031,74,0.031,87,1.853,178,3.097,186,3.341,189,3.097,395,2.659,465,4.255,481,3.097,516,3.097,624,3.097,625,3.097,626,3.097,632,2.659,633,4.255,634,3.097,649,3.761,650,4.727,651,3.761,652,3.761,653,3.761,654,3.761,655,3.761,656,3.761,657,4.727,658,5.906,659,3.761,660,3.761,661,3.761,662,3.761,663,4.727,664,3.761,665,3.761,666,3.761,667,3.761,668,3.761,669,3.761,670,3.761,671,3.761,672,3.761,673,4.727,674,3.761,675,3.761,676,3.761,677,3.761,678,3.761,679,3.761,680,3.761,681,4.727,682,4.727,683,3.761,684,3.761,685,3.761,686,3.761,687,3.761,688,3.761,689,3.761,690,3.761,691,3.761,692,3.761,693,3.761,694,3.761,695,3.761,696,3.761,697,3.761,698,3.761,699,3.761,700,3.761,701,3.761,702,3.761,703,3.761,704,3.761,705,3.761,706,3.761,707,3.761,708,3.761,709,3.761]],["title/modules.html",[77,2.026]],["body/modules.html",[12,0.034,73,0.034,74,0.034,76,2.844,77,2.26,82,2.526,83,2.526,175,3.493,710,5.634,711,5.634,712,5.634]],["title/overview.html",[713,3.385]],["body/overview.html",[2,1.943,12,0.039,40,2.205,73,0.031,74,0.031,76,3.714,77,1.943,78,2.157,79,3.247,80,3.247,81,3.247,82,3.277,83,3.219,84,2.444,85,3.018,86,2.445,87,1.943,131,3.247,132,3.247,133,2.907,139,1.943,233,1.748,286,3.247,287,3.247,288,1.726,289,1.726,713,3.247,714,3.944,715,3.944,716,3.944,717,3.944]],["title/miscellaneous/typealiases.html",[551,1.258,718,3.644]],["body/miscellaneous/typealiases.html",[7,0.728,12,0.038,15,1.265,20,1.544,41,3.614,73,0.033,74,0.033,101,3.022,124,4.006,126,4.006,234,3.022,335,3.022,551,2.106,719,4.275,720,5.113,721,4.275,722,5.113,723,5.794]],["title/miscellaneous/variables.html",[551,1.258,724,3]],["body/miscellaneous/variables.html",[7,0.793,12,0.037,73,0.035,74,0.035,140,3.289,145,3.332,156,1.682,191,1.861,224,3.831,551,2.293,724,3.831,725,4.654]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":487,"title":{},"body":{"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["0.1.0",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{}}}],["0.1.13",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["0010",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"index.html":{}}}],["07bb4c3",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["07e16f5",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["1.0.0",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["1.1.5",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":377,"title":{},"body":{"injectables/TokenService.html":{}}}],["10.0.0",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["1b2163d",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":715,"title":{},"body":{"overview.html":{}}}],["2/3",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":397,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["2021",{"_index":395,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["2d21a8f",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":714,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":284,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["32",{"_index":205,"title":{},"body":{"classes/Challenge.html":{}}}],["33",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["3b857d3",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":717,"title":{},"body":{"overview.html":{}}}],["5.1.5",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["53ff16b",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["58ddc5e",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":716,"title":{},"body":{"overview.html":{}}}],["60",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["606350c",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["6244d65",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["6dcb57d",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["6e78bf4",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["6f0de7a",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["7.4.0",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["7433be2",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["75",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["79620c4",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["8.2.4",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["8020ad9",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["86400",{"_index":379,"title":{},"body":{"injectables/TokenService.html":{}}}],["8982d9a",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["8cdf3d3",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["8f5c35e",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["9.1.0",{"_index":417,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["a0611f6",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["a632002",{"_index":453,"title":{},"body":{"changelog.html":{}}}],["aa05d89",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":680,"title":{},"body":{"license.html":{}}}],["accept",{"_index":258,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["account",{"_index":143,"title":{},"body":{"classes/Challenge.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["account'})@isbytelength(0",{"_index":204,"title":{},"body":{"classes/Challenge.html":{}}}],["accounts",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["action",{"_index":703,"title":{},"body":{"license.html":{}}}],["actually",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["added",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["addition",{"_index":168,"title":{},"body":{"classes/Challenge.html":{}}}],["aliases",{"_index":719,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":671,"title":{},"body":{"license.html":{}}}],["apibearerauth",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["apiproperty",{"_index":207,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{}}}],["apiproperty({description",{"_index":147,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{}}}],["apipropertyoptional",{"_index":208,"title":{},"body":{"classes/Challenge.html":{}}}],["apipropertyoptional({description",{"_index":162,"title":{},"body":{"classes/Challenge.html":{}}}],["app.controller",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":76,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":707,"title":{},"body":{"license.html":{}}}],["assertion",{"_index":367,"title":{},"body":{"injectables/TokenService.html":{}}}],["associated",{"_index":659,"title":{},"body":{"license.html":{}}}],["assume",{"_index":190,"title":{},"body":{"classes/Challenge.html":{}}}],["async",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["attach",{"_index":197,"title":{},"body":{"classes/Challenge.html":{}}}],["auth",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/TokenService.html":{},"changelog.html":{}}}],["auth.controller",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.guard.ts",{"_index":293,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":100,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":153,"title":{},"body":{"classes/Challenge.html":{}}}],["authguard",{"_index":294,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":296,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":82,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":696,"title":{},"body":{"license.html":{}}}],["await",{"_index":255,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["b07fb44",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["backwards",{"_index":192,"title":{},"body":{"classes/Challenge.html":{}}}],["badrequestexception",{"_index":248,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["base64",{"_index":320,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["bb42c3f",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["bc2f8bf",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":566,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["bootstrap",{"_index":502,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brault",{"_index":626,"title":{},"body":{"index.html":{},"license.html":{}}}],["browse",{"_index":712,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":710,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":348,"title":{},"body":{"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["bug",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":649,"title":{},"body":{"license.html":{}}}],["cache",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["catch",{"_index":269,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["ce35737",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["cf45669",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["challenge",{"_index":107,"title":{"classes/Challenge.html":{}},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"changelog.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["challenge.account",{"_index":277,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.client_domain",{"_index":273,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.home_domain",{"_index":275,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.memo",{"_index":281,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge/challenge.service",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["challengeresponse",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"miscellaneous/typealiases.html":{}}}],["challengeservice",{"_index":84,"title":{"injectables/ChallengeService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"coverage.html":{},"overview.html":{}}}],["challengetx",{"_index":358,"title":{},"body":{"injectables/TokenService.html":{}}}],["changelog",{"_index":387,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":654,"title":{},"body":{"license.html":{}}}],["check",{"_index":450,"title":{},"body":{"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["claim",{"_index":699,"title":{},"body":{"license.html":{}}}],["class",{"_index":48,"title":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"classes/isXDR.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["classes",{"_index":139,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"classes/isXDR.html":{},"overview.html":{}}}],["client",{"_index":148,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["client_domain",{"_index":144,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"changelog.html":{}}}],["client_domain.tostring",{"_index":380,"title":{},"body":{"injectables/TokenService.html":{}}}],["client_domain_signing_key",{"_index":254,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["client_domain_signing_key.tostring",{"_index":285,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["clientaccount",{"_index":596,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccount.signers",{"_index":610,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccount.thresholds.high_threshold",{"_index":604,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccountid",{"_index":368,"title":{},"body":{"injectables/TokenService.html":{}}}],["clients",{"_index":165,"title":{},"body":{"classes/Challenge.html":{}}}],["clients'})@isin(['home_domain'])@isfqdn()@isoptional",{"_index":195,"title":{},"body":{"classes/Challenge.html":{}}}],["cluster_appmodule",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_customvalidatorsmodule",{"_index":286,"title":{},"body":{"modules/CustomValidatorsModule.html":{},"overview.html":{}}}],["cluster_customvalidatorsmodule_providers",{"_index":287,"title":{},"body":{"modules/CustomValidatorsModule.html":{},"overview.html":{}}}],["code",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["compatibility",{"_index":193,"title":{},"body":{"classes/Challenge.html":{}}}],["conditions",{"_index":679,"title":{},"body":{"license.html":{}}}],["config",{"_index":222,"title":{},"body":{"classes/Challenge.html":{}}}],["config/configuration",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["configmodule.forroot",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["configservice",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["configservice.get('jwtsecret",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["connection",{"_index":708,"title":{},"body":{"license.html":{}}}],["const",{"_index":223,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["constructor",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{}}}],["constructor(configservice",{"_index":239,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{}}}],["constructor(private",{"_index":252,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["contains",{"_index":580,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["content",{"_index":259,"title":{},"body":{"injectables/ChallengeService.html":{},"changelog.html":{}}}],["contract",{"_index":704,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"changelog.html":{},"overview.html":{}}}],["copies",{"_index":673,"title":{},"body":{"license.html":{}}}],["copy",{"_index":657,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":633,"title":{},"body":{"index.html":{},"license.html":{}}}],["cors",{"_index":420,"title":{},"body":{"changelog.html":{}}}],["coverage",{"_index":480,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createtoml",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["customvalidators",{"_index":218,"title":{},"body":{"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{},"classes/Token.html":{}}}],["customvalidators.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["customvalidatorsmodule",{"_index":83,"title":{"modules/CustomValidatorsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomValidatorsModule.html":{},"modules.html":{},"overview.html":{}}}],["cz",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["d2118cc",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":700,"title":{},"body":{"license.html":{}}}],["deal",{"_index":661,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":709,"title":{},"body":{"license.html":{}}}],["debug",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["decode",{"_index":587,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["decodedtoken",{"_index":383,"title":{},"body":{"injectables/TokenService.html":{}}}],["decodedtokenresponse",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["decodes",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/TokenService.html":{}}}],["decodetoken(@request",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken(req",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken(token",{"_index":338,"title":{},"body":{"injectables/TokenService.html":{}}}],["decoding",{"_index":336,"title":{},"body":{"injectables/TokenService.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"classes/Token.html":{}}}],["default",{"_index":191,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":555,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["demo",{"_index":616,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":78,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"changelog.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":141,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["deserialize",{"_index":357,"title":{},"body":{"injectables/TokenService.html":{}}}],["disable",{"_index":361,"title":{},"body":{"injectables/TokenService.html":{}}}],["distribute",{"_index":669,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":481,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documented",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":163,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"changelog.html":{}}}],["domains",{"_index":185,"title":{},"body":{"classes/Challenge.html":{}}}],["dotenv",{"_index":219,"title":{},"body":{"classes/Challenge.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":220,"title":{},"body":{"classes/Challenge.html":{}}}],["dynamically",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["ed25519",{"_index":158,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["ed25519key",{"_index":565,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["email",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["enabled",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["encoded",{"_index":321,"title":{},"body":{"classes/Token.html":{}}}],["endpoint",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["entry",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["envelope",{"_index":571,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["enveloppe",{"_index":332,"title":{},"body":{"classes/Token.html":{}}}],["enveloppe!'})@validate(isvalidchallenge",{"_index":324,"title":{},"body":{"classes/Token.html":{}}}],["error",{"_index":270,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["eslint",{"_index":360,"title":{},"body":{"injectables/TokenService.html":{}}}],["eslint/no",{"_index":365,"title":{},"body":{"injectables/TokenService.html":{}}}],["event",{"_index":695,"title":{},"body":{"license.html":{}}}],["exists",{"_index":244,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["exp",{"_index":378,"title":{},"body":{"injectables/TokenService.html":{}}}],["expected",{"_index":581,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["export",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["express",{"_index":516,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":295,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extra",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f5d1a6e",{"_index":476,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["fb0e8b5",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["felix",{"_index":624,"title":{},"body":{"index.html":{},"license.html":{}}}],["fetch",{"_index":249,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"changelog.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["files",{"_index":660,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":691,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":456,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":448,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":678,"title":{},"body":{"license.html":{}}}],["fpbrault",{"_index":628,"title":{},"body":{"index.html":{}}}],["fqdn",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":653,"title":{},"body":{"license.html":{}}}],["function",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":552,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":676,"title":{},"body":{"license.html":{}}}],["g",{"_index":149,"title":{},"body":{"classes/Challenge.html":{}}}],["generate",{"_index":182,"title":{},"body":{"classes/Challenge.html":{},"changelog.html":{}}}],["generatechallenge",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generatechallenge(challenge",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generated",{"_index":637,"title":{},"body":{"index.html":{}}}],["generates",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generatetoken",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["generatetoken(@body",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetoken(token",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["generation",{"_index":236,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["generator",{"_index":639,"title":{},"body":{"index.html":{}}}],["get('.well",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["getsigningkey",{"_index":238,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getsigningkey(client_domain",{"_index":242,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getting",{"_index":385,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["github",{"_index":627,"title":{},"body":{"index.html":{}}}],["give",{"_index":630,"title":{},"body":{"index.html":{}}}],["granted",{"_index":652,"title":{},"body":{"license.html":{}}}],["guidelines",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":464,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":235,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["hasvalidsignatures",{"_index":288,"title":{"injectables/hasValidSignatures.html":{}},"body":{"modules/CustomValidatorsModule.html":{},"classes/Token.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"overview.html":{}}}],["hbs",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["header",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["header('content",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["headers",{"_index":257,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["helped",{"_index":631,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":651,"title":{},"body":{"license.html":{}}}],["high_threshold",{"_index":599,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["higher",{"_index":600,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["holders",{"_index":697,"title":{},"body":{"license.html":{}}}],["home",{"_index":181,"title":{},"body":{"classes/Challenge.html":{},"changelog.html":{}}}],["home_domain",{"_index":145,"title":{},"body":{"classes/Challenge.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["homedomain",{"_index":598,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["homepage",{"_index":615,"title":{},"body":{"index.html":{}}}],["hopes",{"_index":188,"title":{},"body":{"classes/Challenge.html":{}}}],["https",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["iat",{"_index":375,"title":{},"body":{"injectables/TokenService.html":{}}}],["id",{"_index":200,"title":{},"body":{"classes/Challenge.html":{}}}],["identifier",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":187,"title":{},"body":{"classes/Challenge.html":{}}}],["ignore",{"_index":172,"title":{},"body":{"classes/Challenge.html":{}}}],["ignoreexpiration",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implementation",{"_index":614,"title":{},"body":{"index.html":{}}}],["implements",{"_index":564,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["implied",{"_index":687,"title":{},"body":{"license.html":{}}}],["import",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["imports",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["improved",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":178,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["including",{"_index":663,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["injectable",{"_index":232,"title":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{}},"body":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["injectables",{"_index":233,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"injectables/isValidChallenge.html":{},"overview.html":{}}}],["input",{"_index":560,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["install",{"_index":617,"title":{},"body":{"index.html":{}}}],["installusage",{"_index":619,"title":{},"body":{"index.html":{}}}],["intend",{"_index":166,"title":{},"body":{"classes/Challenge.html":{}}}],["invalid",{"_index":356,"title":{},"body":{"injectables/TokenService.html":{}}}],["isbytelength",{"_index":209,"title":{},"body":{"classes/Challenge.html":{}}}],["isbytelength(0",{"_index":230,"title":{},"body":{"classes/Challenge.html":{}}}],["ised25519",{"_index":216,"title":{"classes/isEd25519.html":{}},"body":{"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["isfqdn",{"_index":210,"title":{},"body":{"classes/Challenge.html":{}}}],["isin",{"_index":211,"title":{},"body":{"classes/Challenge.html":{}}}],["isin([home_domain",{"_index":231,"title":{},"body":{"classes/Challenge.html":{}}}],["isnotmuxedaccount",{"_index":217,"title":{"classes/isNotMuxedAccount.html":{}},"body":{"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["isnumberstring",{"_index":212,"title":{},"body":{"classes/Challenge.html":{}}}],["isoptional",{"_index":213,"title":{},"body":{"classes/Challenge.html":{}}}],["iss",{"_index":371,"title":{},"body":{"injectables/TokenService.html":{}}}],["issue",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["isvalidchallenge",{"_index":289,"title":{"injectables/isValidChallenge.html":{}},"body":{"modules/CustomValidatorsModule.html":{},"classes/Token.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"overview.html":{}}}],["isxdr",{"_index":291,"title":{"classes/isXDR.html":{}},"body":{"modules/CustomValidatorsModule.html":{},"classes/Token.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["javascript",{"_index":612,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":343,"title":{},"body":{"injectables/TokenService.html":{},"changelog.html":{},"dependencies.html":{}}}],["jtw",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["jwt",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"changelog.html":{},"dependencies.html":{}}}],["jwt.decode(token.tostring",{"_index":384,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.jwtpayload",{"_index":345,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.sign(payload",{"_index":381,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.strategy",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":37,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":133,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":160,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["kind",{"_index":686,"title":{},"body":{"license.html":{}}}],["known/stellar.toml",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{}}}],["known/stellar.toml')@header('content",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["liability",{"_index":701,"title":{},"body":{"license.html":{}}}],["liable",{"_index":698,"title":{},"body":{"license.html":{}}}],["license",{"_index":632,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":635,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":664,"title":{},"body":{"license.html":{}}}],["limited",{"_index":688,"title":{},"body":{"license.html":{}}}],["line",{"_index":363,"title":{},"body":{"injectables/TokenService.html":{}}}],["literal",{"_index":723,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":237,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["logger(challengeservice.name",{"_index":246,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["logger.error(error",{"_index":271,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["logging",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["m",{"_index":151,"title":{},"body":{"classes/Challenge.html":{}}}],["managedata",{"_index":353,"title":{},"body":{"injectables/TokenService.html":{}}}],["manager",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":638,"title":{},"body":{"index.html":{}}}],["meet",{"_index":327,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["meets",{"_index":603,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["memberof",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["memo",{"_index":146,"title":{},"body":{"classes/Challenge.html":{}}}],["memo/muxed",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["memonone",{"_index":344,"title":{},"body":{"injectables/TokenService.html":{}}}],["merchantability",{"_index":690,"title":{},"body":{"license.html":{}}}],["merge",{"_index":667,"title":{},"body":{"license.html":{}}}],["message",{"_index":155,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["metadata",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":260,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["miscellaneous",{"_index":551,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":459,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":634,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":666,"title":{},"body":{"license.html":{}}}],["module",{"_index":75,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"modules/CustomValidatorsModule.html":{}}}],["modules",{"_index":77,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"modules.html":{},"overview.html":{}}}],["moved",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["multiple",{"_index":184,"title":{},"body":{"classes/Challenge.html":{}}}],["muxed",{"_index":150,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["name",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["native",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["nestjs/config",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"changelog.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["nestjs/core",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"classes/Challenge.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["network_passphrase",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["new",{"_index":245,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["next",{"_index":362,"title":{},"body":{"injectables/TokenService.html":{}}}],["no_symbols",{"_index":227,"title":{},"body":{"classes/Challenge.html":{}}}],["node",{"_index":250,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["non",{"_index":366,"title":{},"body":{"injectables/TokenService.html":{}}}],["noninfringement",{"_index":694,"title":{},"body":{"license.html":{}}}],["notable",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":681,"title":{},"body":{"license.html":{}}}],["now",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["null",{"_index":268,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["obtaining",{"_index":656,"title":{},"body":{"license.html":{}}}],["older",{"_index":194,"title":{},"body":{"classes/Challenge.html":{}}}],["op",{"_index":350,"title":{},"body":{"injectables/TokenService.html":{}}}],["op.name",{"_index":354,"title":{},"body":{"injectables/TokenService.html":{}}}],["op.type",{"_index":352,"title":{},"body":{"injectables/TokenService.html":{}}}],["op.value",{"_index":355,"title":{},"body":{"injectables/TokenService.html":{}}}],["operation",{"_index":359,"title":{},"body":{"injectables/TokenService.html":{}}}],["operation.source",{"_index":369,"title":{},"body":{"injectables/TokenService.html":{}}}],["operations",{"_index":582,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["optional",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["org",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["otherwise",{"_index":706,"title":{},"body":{"license.html":{}}}],["out",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"changelog.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":713,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":508,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["parameter",{"_index":173,"title":{},"body":{"classes/Challenge.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["parseint(transaction.timebounds.mintime",{"_index":376,"title":{},"body":{"injectables/TokenService.html":{}}}],["particular",{"_index":692,"title":{},"body":{"license.html":{}}}],["passport",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{}}}],["payload.sub",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":650,"title":{},"body":{"license.html":{}}}],["permit",{"_index":674,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":198,"title":{},"body":{"classes/Challenge.html":{}}}],["perron",{"_index":625,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":655,"title":{},"body":{"license.html":{}}}],["persons",{"_index":675,"title":{},"body":{"license.html":{}}}],["portions",{"_index":684,"title":{},"body":{"license.html":{}}}],["post",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["present",{"_index":435,"title":{},"body":{"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["previously",{"_index":341,"title":{},"body":{"injectables/TokenService.html":{}}}],["private",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["process.env.home_domain",{"_index":224,"title":{},"body":{"classes/Challenge.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":390,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["properties",{"_index":142,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{}}}],["protocol",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["provide",{"_index":601,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["provided",{"_index":189,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["providers",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{}}}],["public",{"_index":159,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["publish",{"_index":668,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":693,"title":{},"body":{"license.html":{}}}],["query",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["quotes",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["readme",{"_index":636,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{}}}],["received",{"_index":588,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["reference",{"_index":613,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["relatedpropertyname",{"_index":575,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["relatedvalue",{"_index":577,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["relatedvalue.startswith('m",{"_index":579,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["removed",{"_index":468,"title":{},"body":{"changelog.html":{}}}],["representation",{"_index":590,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["req",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"classes/Challenge.html":{},"classes/Token.html":{}}}],["request.'})@isfqdn()@isoptional",{"_index":179,"title":{},"body":{"classes/Challenge.html":{}}}],["required",{"_index":328,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["reset",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"overview.html":{}}}],["response.text",{"_index":263,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["restriction",{"_index":662,"title":{},"body":{"license.html":{}}}],["results",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":433,"title":{},"body":{"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["return",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["returns",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["rights",{"_index":665,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":620,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["sdk",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"changelog.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["secretorkey",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secured",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":169,"title":{},"body":{"classes/Challenge.html":{},"changelog.html":{}}}],["sell",{"_index":672,"title":{},"body":{"license.html":{}}}],["sep",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"index.html":{}}}],["server",{"_index":174,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["server.'})@validate(ised25519",{"_index":154,"title":{},"body":{"classes/Challenge.html":{}}}],["server.loadaccount(xdr.operations[0].source",{"_index":597,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["servers",{"_index":171,"title":{},"body":{"classes/Challenge.html":{}}}],["services",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":682,"title":{},"body":{"license.html":{}}}],["show",{"_index":629,"title":{},"body":{"index.html":{}}}],["signature",{"_index":594,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["signatures",{"_index":326,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["signed",{"_index":322,"title":{},"body":{"classes/Token.html":{}}}],["signing",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["signing_key",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{}}}],["simple",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["simplified",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["sodium",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["software",{"_index":658,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"modules/CustomValidatorsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["specific",{"_index":177,"title":{},"body":{"classes/Challenge.html":{}}}],["src/.../auth.controller.ts",{"_index":720,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../challenge.service.ts",{"_index":721,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../challenge.ts",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../token.service.ts",{"_index":722,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:24",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:30",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/jwt",{"_index":292,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/challenge.ts",{"_index":140,"title":{},"body":{"classes/Challenge.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/challenge.ts:31",{"_index":161,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:43",{"_index":206,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:52",{"_index":196,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:60",{"_index":180,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge/challenge.service.ts",{"_index":234,"title":{},"body":{"injectables/ChallengeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/challenge/challenge.service.ts:22",{"_index":240,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:24",{"_index":247,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:33",{"_index":243,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:75",{"_index":241,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/customvalidators.module.ts",{"_index":290,"title":{},"body":{"modules/CustomValidatorsModule.html":{}}}],["src/customvalidators.ts",{"_index":484,"title":{},"body":{"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["src/customvalidators.ts:101",{"_index":643,"title":{},"body":{"classes/isNotMuxedAccount.html":{}}}],["src/customvalidators.ts:120",{"_index":642,"title":{},"body":{"classes/isNotMuxedAccount.html":{}}}],["src/customvalidators.ts:134",{"_index":644,"title":{},"body":{"injectables/isValidChallenge.html":{}}}],["src/customvalidators.ts:143",{"_index":646,"title":{},"body":{"injectables/isValidChallenge.html":{}}}],["src/customvalidators.ts:166",{"_index":645,"title":{},"body":{"injectables/isValidChallenge.html":{}}}],["src/customvalidators.ts:180",{"_index":556,"title":{},"body":{"injectables/hasValidSignatures.html":{}}}],["src/customvalidators.ts:189",{"_index":559,"title":{},"body":{"injectables/hasValidSignatures.html":{}}}],["src/customvalidators.ts:247",{"_index":557,"title":{},"body":{"injectables/hasValidSignatures.html":{}}}],["src/customvalidators.ts:26",{"_index":641,"title":{},"body":{"classes/isEd25519.html":{}}}],["src/customvalidators.ts:47",{"_index":640,"title":{},"body":{"classes/isEd25519.html":{}}}],["src/customvalidators.ts:69",{"_index":648,"title":{},"body":{"classes/isXDR.html":{}}}],["src/customvalidators.ts:87",{"_index":647,"title":{},"body":{"classes/isXDR.html":{}}}],["src/main.ts",{"_index":500,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/token.ts",{"_index":319,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/token.ts:29",{"_index":330,"title":{},"body":{"classes/Token.html":{}}}],["src/token/token.service.ts",{"_index":335,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/token/token.service.ts:27",{"_index":337,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:36",{"_index":340,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:88",{"_index":339,"title":{},"body":{"injectables/TokenService.html":{}}}],["standard",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["started",{"_index":386,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startrun",{"_index":621,"title":{},"body":{"index.html":{}}}],["statements",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["stellar",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"changelog.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellar.toml",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["stellarsdk",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.muxedaccount.fromaddress(value",{"_index":569,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.networks.testnet",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["stellarsdk.operation",{"_index":347,"title":{},"body":{"injectables/TokenService.html":{}}}],["stellarsdk.server",{"_index":591,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.strkey.isvalided25519publickey(value",{"_index":570,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.transaction",{"_index":346,"title":{},"body":{"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.buildchallengetx",{"_index":282,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["stellarsdk.utils.gathertxsigners",{"_index":606,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.readchallengetx",{"_index":584,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.verifychallengetxsigners",{"_index":605,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.verifychallengetxthreshold",{"_index":609,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.xdr.transactionenvelope.validatexdr",{"_index":573,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["strategy",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{}}}],["sub",{"_index":372,"title":{},"body":{"injectables/TokenService.html":{}}}],["subject",{"_index":677,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":670,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":683,"title":{},"body":{"license.html":{}}}],["super",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["supplied",{"_index":164,"title":{},"body":{"classes/Challenge.html":{}}}],["support",{"_index":175,"title":{},"body":{"classes/Challenge.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["supported",{"_index":226,"title":{},"body":{"classes/Challenge.html":{}}}],["supported.'})@isoptional()@isnumberstring({no_symbols",{"_index":202,"title":{},"body":{"classes/Challenge.html":{}}}],["svg",{"_index":711,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["test",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["testauthor",{"_index":623,"title":{},"body":{"index.html":{}}}],["tests",{"_index":622,"title":{},"body":{"index.html":{}}}],["text",{"_index":262,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["text/plain",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{}}}],["then((data",{"_index":264,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["then((response",{"_index":261,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.challengeservice.generatechallenge(challenge",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('homedomain",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.configservice.get('horizonserver",{"_index":592,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.configservice.get('jwtsecret",{"_index":382,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.configservice.get('networkpassphrase",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.configservice.get('source.keypair",{"_index":283,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.configservice.get('source.keypair').publickey",{"_index":585,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["this.configservice.get('source.publickey",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('tomlextras",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["this.getsigningkey",{"_index":272,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_account",{"_index":276,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_domain",{"_index":279,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_domain_signing_key",{"_index":278,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('home_domain",{"_index":274,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('memo",{"_index":280,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.tokenservice.decodetoken(req.headers.authorization.slice(7",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["this.tokenservice.generatetoken(token",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["threshold",{"_index":329,"title":{},"body":{"classes/Token.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["thresholds",{"_index":593,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["throw",{"_index":266,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["todo",{"_index":221,"title":{},"body":{"classes/Challenge.html":{}}}],["token",{"_index":26,"title":{"classes/Token.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"changelog.html":{},"coverage.html":{}}}],["token.transaction",{"_index":349,"title":{},"body":{"injectables/TokenService.html":{}}}],["token/token.service",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["tokenresponse",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["tokens",{"_index":183,"title":{},"body":{"classes/Challenge.html":{}}}],["tokenservice",{"_index":40,"title":{"injectables/TokenService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/TokenService.html":{},"coverage.html":{},"overview.html":{}}}],["toml",{"_index":251,"title":{},"body":{"injectables/ChallengeService.html":{},"changelog.html":{},"dependencies.html":{}}}],["toml.parse(data).signing_key",{"_index":265,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["tort",{"_index":705,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["transaction!'})@validate(hasvalidsignatures",{"_index":325,"title":{},"body":{"classes/Token.html":{}}}],["transaction.memo.type",{"_index":373,"title":{},"body":{"injectables/TokenService.html":{}}}],["transaction.memo.value",{"_index":374,"title":{},"body":{"injectables/TokenService.html":{}}}],["transaction.operations",{"_index":351,"title":{},"body":{"injectables/TokenService.html":{}}}],["transformer",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":228,"title":{},"body":{"classes/Challenge.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["true})@validate(isnotmuxedaccount",{"_index":203,"title":{},"body":{"classes/Challenge.html":{}}}],["try",{"_index":253,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["try/catch",{"_index":454,"title":{},"body":{"changelog.html":{}}}],["type",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":718,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":201,"title":{},"body":{"classes/Challenge.html":{}}}],["typescript",{"_index":364,"title":{},"body":{"injectables/TokenService.html":{}}}],["ui",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["unable",{"_index":267,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["undefined",{"_index":370,"title":{},"body":{"injectables/TokenService.html":{},"changelog.html":{}}}],["unknown",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["updated",{"_index":477,"title":{},"body":{"changelog.html":{}}}],["url('/.well",{"_index":256,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["urlencoded",{"_index":589,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["use",{"_index":186,"title":{},"body":{"classes/Challenge.html":{},"changelog.html":{},"license.html":{}}}],["used",{"_index":199,"title":{},"body":{"classes/Challenge.html":{}}}],["useguards",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@get('profile')@apibearerauth",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["userid",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["username",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid",{"_index":157,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate",{"_index":214,"title":{},"body":{"classes/Challenge.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate(hasvalidsignatures",{"_index":334,"title":{},"body":{"classes/Token.html":{}}}],["validate(input",{"_index":558,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate(ised25519",{"_index":225,"title":{},"body":{"classes/Challenge.html":{}}}],["validate(isnotmuxedaccount",{"_index":229,"title":{},"body":{"classes/Challenge.html":{}}}],["validate(isvalidchallenge",{"_index":333,"title":{},"body":{"classes/Token.html":{}}}],["validate(isxdr",{"_index":331,"title":{},"body":{"classes/Token.html":{}}}],["validate(payload",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(value",{"_index":567,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatechallenge",{"_index":583,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validated",{"_index":342,"title":{},"body":{"injectables/TokenService.html":{}}}],["validates",{"_index":554,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatesignatures",{"_index":586,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validation",{"_index":427,"title":{},"body":{"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments",{"_index":563,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments.constraints",{"_index":576,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments.constraints[0",{"_index":574,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments.object",{"_index":578,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validator",{"_index":215,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"dependencies.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatorconstraint",{"_index":561,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatorconstraintinterface",{"_index":562,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["value",{"_index":156,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["value.startswith('m",{"_index":568,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["variable",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":724,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":176,"title":{},"body":{"classes/Challenge.html":{}}}],["verify",{"_index":167,"title":{},"body":{"classes/Challenge.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["verifying",{"_index":170,"title":{},"body":{"classes/Challenge.html":{}}}],["version",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{}}}],["warranties",{"_index":689,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":685,"title":{},"body":{"license.html":{}}}],["web_auth_endpoint",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{}}}],["webauthdomain",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["weight",{"_index":602,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["weights",{"_index":595,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["welcome",{"_index":611,"title":{},"body":{"index.html":{}}}],["whether",{"_index":702,"title":{},"body":{"license.html":{}}}],["wishes",{"_index":152,"title":{},"body":{"classes/Challenge.html":{}}}],["without",{"_index":465,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["x.source",{"_index":608,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdr",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"changelog.html":{},"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdr'})@validate(isxdr",{"_index":323,"title":{},"body":{"classes/Token.html":{}}}],["xdr.operations.map((x",{"_index":607,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdrtransaction",{"_index":572,"title":{},"body":{"injectables/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isNotMuxedAccount.html":{},"injectables/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["yarn",{"_index":618,"title":{},"body":{"index.html":{}}}],["yarn.lock",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomValidatorsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToml\n                            \n                            \n                                decodeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToml\n                        \n                    \n                \n            \n            \n                \ncreateToml()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/stellar.toml')@Header('content-type', 'text/plain')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:24\n                \n            \n\n\n            \n                \n                    Decodes and returns the JWT token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Request, Header } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { TokenService, DecodedTokenResponse } from './token/token.service';\nimport { ApiBearerAuth } from '@nestjs/swagger';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly tokenService: TokenService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * Decodes and returns the JWT token\n   *\n   * @param {*} req\n   * @return {DecodedTokenResponse}\n   * @memberof AppController\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @ApiBearerAuth()\n  decodeToken(@Request() req: any): Promise {\n    return this.tokenService.decodeToken(req.headers.authorization.slice(7));\n  }\n\n  @Get('.well-known/stellar.toml')\n  @Header('content-type', 'text/plain')\n  createToml(): string {\n    return (\n      `ACCOUNTS = [ \"` +\n      this.configService.get('source.publicKey') +\n      `\" ]\nVERSION = \"0.1.0\"\nSIGNING_KEY = \"` +\n      this.configService.get('source.publicKey') +\n      `\"\nNETWORK_PASSPHRASE = \"` +\n      this.configService.get('networkPassphrase') +\n      `\"\nWEB_AUTH_ENDPOINT = \"https://` +\n      this.configService.get('homeDomain') +\n      `/auth\"\n` +\n      this.configService.get('tomlExtras') +\n      `\n`\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCustomValidatorsModule\n\nCustomValidatorsModule\n\nAppModule -->\n\nCustomValidatorsModule->AppModule\n\n\n\n\n\nChallengeService\n\nChallengeService\n\nAppModule -->\n\nChallengeService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChallengeService\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CustomValidatorsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { CustomValidatorsModule } from './CustomValidators.module';\nimport { ChallengeService } from './challenge/challenge.service';\nimport { TokenService } from './token/token.service';\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from './config/configuration';\n\n@Module({\n  imports: [\n    AuthModule,\n    CustomValidatorsModule,\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [ChallengeService, TokenService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateChallenge\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateChallenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateChallenge(challenge: Challenge)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n                    Generates a SEP-0010 challenge\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                Challenge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(token: Token)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                     generateToken takes a challenge XDR and returns a JTW token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Token\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Query, Post } from '@nestjs/common';\nimport * as StellarSdk from 'stellar-sdk';\nimport { ChallengeService } from '../challenge/challenge.service';\nimport { TokenService } from '../token/token.service';\nimport { Challenge } from '../challenge';\nimport { Token } from '../token';\nStellarSdk.Networks.TESTNET;\n\ntype ChallengeResponse =\n  | {\n      transaction: string;\n      network_passphrase: string;\n    }\n  | string;\n\ntype TokenResponse =\n  | {\n      token: string;\n    }\n  | string;\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly challengeService: ChallengeService,\n    private readonly tokenService: TokenService,\n  ) {}\n\n  /**\n   * Generates a SEP-0010 challenge\n   *\n   * @param {Challenge} challenge\n   * @return {Promise}\n   * @memberof AuthController\n   */\n  @Get()\n  async generateChallenge(\n    @Query() challenge: Challenge,\n  ): Promise {\n    return this.challengeService.generateChallenge(challenge);\n  }\n\n  /**\n   *  generateToken takes a challenge XDR and returns a JTW token.\n   *\n   * @param {Token} token\n   * @return {Promise}\n   * @memberof AuthController\n   */\n  @Post()\n  async generateToken(@Body() token: Token): Promise {\n    return this.tokenService.generateToken(token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nChallengeService\n\nChallengeService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nChallengeService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChallengeService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { ChallengeService } from '../challenge/challenge.service';\nimport { TokenService } from '../token/token.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [PassportModule, ConfigModule.forRoot()],\n  controllers: [AuthController],\n  providers: [ChallengeService, TokenService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Challenge.html":{"url":"classes/Challenge.html","title":"class - Challenge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Challenge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/challenge.ts\n        \n\n\n            \n                Description\n            \n            \n                SEP-0010 Challenge Request Parameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                account\n                            \n                            \n                                    Readonly\n                                    Optional\n                                client_domain\n                            \n                            \n                                    Readonly\n                                    Optional\n                                home_domain\n                            \n                            \n                                    Readonly\n                                    Optional\n                                memo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The Client Account, which can be a stellar account (G...) or muxed account (M...) that the Client wishes to authenticate with the Server.'})@Validate(isEd25519, {message: '($value) is not a valid Ed25519 Public Key!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        client_domain\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A Client Domain. Supplied by Clients that intend to verify their domain in addition to the Client Account. See Verifying the Client Domain. Servers should ignore this parameter if the Server does not support Client Domain verification, or the Server does not support verification for the specific Client Domain included in the request.'})@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        home_domain\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A Home Domain. Servers that generate tokens for multiple Home Domains can use this parameter to identify which home domain the Client hopes to authenticate with. If not provided by the Client, the Server should assume a default for backwards compatibility with older Clients'})@IsIn(['HOME_DOMAIN'])@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        memo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The memo to attach to the challenge transaction. Only permitted if a Stellar account (G...) is used. The memo must be of type id. Other memo types are not supported.'})@IsOptional()@IsNumberString({no_symbols: true})@Validate(isNotMuxedAccount, ['account'], {message: 'Memo cannot be used with a muxed account'})@IsByteLength(0, 32)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsByteLength,\n  IsFQDN,\n  IsIn,\n  IsNumberString,\n  IsOptional,\n  Validate,\n} from 'class-validator';\nimport { isEd25519, isNotMuxedAccount } from './CustomValidators';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n// TODO: get home domain from config module\nconst HOME_DOMAIN = process.env.HOME_DOMAIN;\n\n/**\n * SEP-0010 Challenge Request Parameters\n *\n * @export\n * @class Challenge\n */\nexport class Challenge {\n  @ApiProperty({\n    description:\n      'The Client Account, which can be a stellar account (G...) or muxed account (M...) that the Client wishes to authenticate with the Server.',\n  })\n  @Validate(isEd25519, {\n    message: '($value) is not a valid Ed25519 Public Key!',\n  })\n  readonly account: string;\n\n  @ApiPropertyOptional({\n    description:\n      'The memo to attach to the challenge transaction. Only permitted if a Stellar account (G...) is used. The memo must be of type id. Other memo types are not supported.',\n  })\n  @IsOptional()\n  @IsNumberString({ no_symbols: true })\n  @Validate(isNotMuxedAccount, ['account'], {\n    message: 'Memo cannot be used with a muxed account',\n  })\n  @IsByteLength(0, 32)\n  readonly memo?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'A Home Domain. Servers that generate tokens for multiple Home Domains can use this parameter to identify which home domain the Client hopes to authenticate with. If not provided by the Client, the Server should assume a default for backwards compatibility with older Clients',\n  })\n  @IsIn([HOME_DOMAIN])\n  @IsFQDN()\n  @IsOptional()\n  readonly home_domain?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'A Client Domain. Supplied by Clients that intend to verify their domain in addition to the Client Account. See Verifying the Client Domain. Servers should ignore this parameter if the Server does not support Client Domain verification, or the Server does not support verification for the specific Client Domain included in the request.',\n  })\n  @IsFQDN()\n  @IsOptional()\n  readonly client_domain?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChallengeService.html":{"url":"injectables/ChallengeService.html","title":"injectable - ChallengeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChallengeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/challenge/challenge.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles SEP-0010 challenge generation\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateChallenge\n                            \n                            \n                                    Async\n                                getSigningKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/challenge/challenge.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateChallenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateChallenge(challenge: Challenge)\n                \n            \n\n\n            \n                \n                    Defined in src/challenge/challenge.service.ts:75\n                \n            \n\n\n            \n                \n                    Generates a SEP-0010 challenge\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                Challenge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSigningKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSigningKey(client_domain: string)\n                \n            \n\n\n            \n                \n                    Defined in src/challenge/challenge.service.ts:33\n                \n            \n\n\n            \n                \n                    Returns the public key of a client domain if it exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client_domain\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ChallengeService.name)\n                    \n                \n                    \n                        \n                                Defined in src/challenge/challenge.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { Challenge } from '../challenge';\nimport * as StellarSdk from 'stellar-sdk';\nimport fetch from 'node-fetch';\nimport * as toml from 'toml';\nimport { ConfigService } from '@nestjs/config';\n\nexport type ChallengeResponse =\n  | {\n      transaction: string;\n      network_passphrase: string;\n    }\n  | string;\n\n/**\n * Handles SEP-0010 challenge generation\n *\n * @export\n * @class ChallengeService\n */\n@Injectable()\nexport class ChallengeService {\n  constructor(private configService: ConfigService) {}\n  private readonly logger = new Logger(ChallengeService.name);\n\n  /**\n   * Returns the public key of a client domain if it exists\n   *\n   * @param {string} client_domain\n   * @return {Promise}\n   * @memberof ChallengeService\n   */\n  async getSigningKey(\n    client_domain: string,\n  ): Promise {\n    try {\n      const client_domain_signing_key = client_domain\n        ? await fetch(\n            new URL('/.well-known/stellar.toml', 'https://' + client_domain),\n            {\n              headers: {\n                Accept: 'text/plain',\n                'Content-Type': 'text/plain',\n              },\n              method: 'GET',\n            },\n          )\n            .then((response: { text: () => any }) => response.text())\n            .then((data: string) => {\n              if (toml.parse(data).SIGNING_KEY) {\n                return toml.parse(data).SIGNING_KEY;\n              } else {\n                throw new BadRequestException(\n                  \"Unable to fetch 'client_domain' SIGNING_KEY\",\n                );\n              }\n            })\n        : null;\n      return client_domain_signing_key;\n    } catch (error) {\n      Logger.error(error);\n      throw new BadRequestException(\n        \"Unable to fetch 'client_domain' SIGNING_KEY\",\n      );\n    }\n  }\n\n  /**\n   * Generates a SEP-0010 challenge\n   *\n   * @param {Challenge} challenge\n   * @return {Promise}\n   * @memberof ChallengeService\n   */\n  async generateChallenge(challenge: Challenge): Promise {\n    const client_domain_signing_key = await this.getSigningKey(\n      challenge.client_domain,\n    );\n\n    this.logger.debug('home_domain:' + challenge.home_domain);\n    this.logger.debug('client_account:' + challenge.account);\n    this.logger.debug('client_domain_signing_key:' + client_domain_signing_key);\n    this.logger.debug('client_domain:' + challenge.client_domain);\n    this.logger.debug('Memo: ' + challenge.memo);\n\n    let transaction;\n\n    if (challenge.client_domain) {\n      transaction = StellarSdk.Utils.buildChallengeTx(\n        this.configService.get('source.keypair'),\n        challenge.account,\n        challenge.home_domain || this.configService.get('homeDomain'),\n        300,\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        challenge.memo,\n        challenge.client_domain,\n        client_domain_signing_key.toString(),\n      );\n    } else {\n      transaction = StellarSdk.Utils.buildChallengeTx(\n        this.configService.get('source.keypair'),\n        challenge.account,\n        challenge.home_domain || this.configService.get('homeDomain'),\n        300,\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        challenge.memo,\n      );\n    }\n    return {\n      transaction: transaction,\n      network_passphrase: this.configService.get('networkPassphrase'),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomValidatorsModule.html":{"url":"modules/CustomValidatorsModule.html","title":"module - CustomValidatorsModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomValidatorsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomValidatorsModule\n\n\n\ncluster_CustomValidatorsModule_providers\n\n\n\n\nhasValidSignatures\n\nhasValidSignatures\n\n\n\nCustomValidatorsModule\n\nCustomValidatorsModule\n\nCustomValidatorsModule -->\n\nhasValidSignatures->CustomValidatorsModule\n\n\n\n\n\nisValidChallenge\n\nisValidChallenge\n\nCustomValidatorsModule -->\n\nisValidChallenge->CustomValidatorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/CustomValidators.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            hasValidSignatures\n                        \n                        \n                            isValidChallenge\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {\n  isEd25519,\n  isNotMuxedAccount,\n  isValidChallenge,\n  isXDR,\n  hasValidSignatures,\n} from './CustomValidators';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n  providers: [\n    isEd25519,\n    isNotMuxedAccount,\n    isValidChallenge,\n    isXDR,\n    hasValidSignatures,\n  ],\n})\nexport class CustomValidatorsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('jwtSecret'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token.ts\n        \n\n\n            \n                Description\n            \n            \n                SEP-0010 Token Request Parameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                transaction\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        transaction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The base64 encoded signed challenge transaction XDR'})@Validate(isXDR, ['base64'], {message: 'Transaction is not a valid base64-encoded XDR transaction enveloppe!'})@Validate(isValidChallenge, {message: 'Transaction is not a valid challenge transaction!'})@Validate(hasValidSignatures, {message: 'Signatures are not valid or do not meet the required threshold!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/token.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Validate } from 'class-validator';\nimport {\n  hasValidSignatures,\n  isValidChallenge,\n  isXDR,\n} from './CustomValidators';\n\n/**\n * SEP-0010 Token Request Parameters\n *\n * @export\n * @class Token\n */\nexport class Token {\n  @ApiProperty({\n    description: 'The base64 encoded signed challenge transaction XDR',\n  })\n  @Validate(isXDR, ['base64'], {\n    message:\n      'Transaction is not a valid base64-encoded XDR transaction enveloppe!',\n  })\n  @Validate(isValidChallenge, {\n    message: 'Transaction is not a valid challenge transaction!',\n  })\n  @Validate(hasValidSignatures, {\n    message: 'Signatures are not valid or do not meet the required threshold!',\n  })\n  readonly transaction: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token/token.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles JWT token generation and decoding\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/token/token.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeToken(token: TokenResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/token/token.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                TokenResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(token: Token)\n                \n            \n\n\n            \n                \n                    Defined in src/token/token.service.ts:36\n                \n            \n\n\n            \n                \n                    generateToken takes a (previously validated) challenge XDR and returns a JTW token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Token\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Token } from '../token';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as jwt from 'jsonwebtoken';\nimport { MemoNone } from 'stellar-sdk';\nimport { ConfigService } from '@nestjs/config';\n\ntype TokenResponse =\n  | {\n      token: string;\n    }\n  | string;\n\nexport type DecodedTokenResponse =\n  | {\n      token: string | jwt.JwtPayload;\n    }\n  | string;\n\n/**\n * Handles JWT token generation and decoding\n *\n * @export\n * @class TokenService\n */\n@Injectable()\nexport class TokenService {\n  constructor(private configService: ConfigService) {}\n  /**\n   * generateToken takes a (previously validated) challenge XDR and returns a JTW token.\n   *\n   * @param {Token} token\n   * @return {Promise}\n   * @memberof TokenService\n   */\n  async generateToken(token: Token): Promise {\n    let transaction: StellarSdk.Transaction,\n      StellarSdk.Operation[]\n    >;\n    let client_domain: Buffer;\n    try {\n      transaction = new StellarSdk.Transaction(\n        token.transaction,\n        this.configService.get('networkPassphrase'),\n        true,\n      );\n      for (const op of transaction.operations) {\n        if (op.type === 'manageData' && op.name === 'client_domain') {\n          client_domain = op.value;\n        }\n      }\n    } catch {\n      throw new Error(\n        'Invalid challenge: unable to deserialize challengeTx transaction string',\n      );\n    }\n\n    const [operation] = transaction.operations;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const clientAccountID: string = operation.source!;\n    const payload =\n      client_domain !== null && client_domain !== undefined\n        ? {\n            iss: 'https://' + this.configService.get('homeDomain') + '/auth',\n            sub:\n              transaction.memo.type !== MemoNone\n                ? clientAccountID + ':' + transaction.memo.value\n                : clientAccountID,\n            iat: parseInt(transaction.timeBounds.minTime, 10),\n            exp: parseInt(transaction.timeBounds.minTime, 10) + 86400,\n            client_domain: client_domain.toString(),\n          }\n        : {\n            iss: 'https://' + this.configService.get('homeDomain') + '/auth',\n            sub:\n              transaction.memo.type !== MemoNone\n                ? clientAccountID + ':' + transaction.memo.value\n                : clientAccountID,\n            iat: parseInt(transaction.timeBounds.minTime, 10),\n            exp: parseInt(transaction.timeBounds.minTime, 10) + 86400,\n          };\n\n    return {\n      token: jwt.sign(payload, this.configService.get('jwtSecret')),\n    };\n  }\n  async decodeToken(token: TokenResponse): Promise {\n    const decodedToken = jwt.decode(token.toString());\n    return {\n      token: decodedToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.1.0 (2021-12-20)\nFeatures\n\n🎸 add memo/muxed account support (2d21a8f)\n🎸 added org email (ce35737)\n🎸 added secured route to test JWT token (bb42c3f)\n🎸 added simple home page (606350c)\n🎸 added stellar.toml file (6dcb57d)\n🎸 bump dependencies (07bb4c3)\n🎸 bump stellar-sdk to 9.1.0 (a0611f6)\n🎸 enabled CORS (53ff16b)\n🎸 enabled CORS for static content (6e78bf4)\n🎸 generate stellar.toml dynamically (d2118cc)\n🎸 improved challenge validation (8982d9a)\n🎸 moved code out of controllers and into services (6f0de7a)\n🎸 retrieve signing key from client_domain when present (58ddc5e)\n🎸 simplified challenge build and validate (8f5c35e)\n🎸 simplified index.html (1b2163d)\n🎸 token endpoint now actually returns a valid JWT token (b07fb44)\n🎸 use @nestjs/config for configuration (3b857d3)\n\nBug Fixes\n\n🐛 added FQDN check on home_domain (cf45669)\n🐛 added jsonwebtoken to package.json (a632002)\n🐛 added try/catch for xdr validation (8cdf3d3)\n🐛 fixed issue with home domain validation (bc2f8bf)\n🐛 fixed missing protocol for WEB_AUTH_ENDPOINT (6244d65)\n🐛 fixes error when client_domain is undefined (8020ad9)\n🐛 fixes WEB_AUTH_ENDPOINT value (aa05d89)\n🐛 handle stellar toml without signing key entry (fb0e8b5)\n🐛 removed /auth from webAuthDomain in challenge validation (7433be2)\n🐛 removed debug logging (07e16f5)\n🐛 removed extra quotes from signing key (f5d1a6e)\n🐛 updated yarn.lock (79620c4)\n\n0.1.0 (2021-12-20)\nFeatures\n\n🎸 add memo/muxed account support (2d21a8f)\n🎸 added org email (ce35737)\n🎸 added secured route to test JWT token (bb42c3f)\n🎸 added simple home page (606350c)\n🎸 added stellar.toml file (6dcb57d)\n🎸 bump dependencies (07bb4c3)\n🎸 bump stellar-sdk to 9.1.0 (a0611f6)\n🎸 enabled CORS (53ff16b)\n🎸 enabled CORS for static content (6e78bf4)\n🎸 improved challenge validation (8982d9a)\n🎸 moved code out of controllers and into services (6f0de7a)\n🎸 retrieve signing key from client_domain when present (58ddc5e)\n🎸 simplified challenge build and validate (8f5c35e)\n🎸 simplified index.html (1b2163d)\n🎸 token endpoint now actually returns a valid JWT token (b07fb44)\n🎸 use @nestjs/config for configuration (3b857d3)\n\nBug Fixes\n\n🐛 added FQDN check on home_domain (cf45669)\n🐛 added jsonwebtoken to package.json (a632002)\n🐛 added try/catch for xdr validation (8cdf3d3)\n🐛 fixed issue with home domain validation (bc2f8bf)\n🐛 fixes error when client_domain is undefined (8020ad9)\n🐛 handle stellar toml without signing key entry (fb0e8b5)\n🐛 removed /auth from webAuthDomain in challenge validation (7433be2)\n🐛 removed debug logging (07e16f5)\n🐛 updated yarn.lock (79620c4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isEd25519\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isNotMuxedAccount\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isXDR\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            injectable\n            hasValidSignatures\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            injectable\n            isValidChallenge\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/challenge.ts\n            \n            class\n            Challenge\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/challenge.ts\n            \n            variable\n            HOME_DOMAIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/challenge/challenge.service.ts\n            \n            injectable\n            ChallengeService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/token.ts\n            \n            class\n            Token\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                50 %\n                (2/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : 8.2.4\n        \n            @nestjs/config : 1.1.5\n        \n            @nestjs/core : 8.2.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : 8.2.4\n        \n            @nestjs/schedule : ^1.0.2\n        \n            @nestjs/swagger : 5.1.5\n        \n            cache-manager : ^3.6.0\n        \n            class-transformer : 0.5.1\n        \n            class-validator : 0.13.2\n        \n            dotenv : ^10.0.0\n        \n            git-cz : 4.8.0\n        \n            hbs : 4.2.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            passport : 0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : 7.4.0\n        \n            sodium-native : ^3.3.0\n        \n            stellar-sdk : 9.1.0\n        \n            swagger-ui-express : 4.3.0\n        \n            toml : ^3.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/hasValidSignatures.html":{"url":"injectables/hasValidSignatures.html","title":"injectable - hasValidSignatures","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  hasValidSignatures\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the required signatures are present on the transaction\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/CustomValidators.ts:180\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:247\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(input: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:189\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain'),\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n        true,\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      const homeDomain = this.configService.get('homeDomain');\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nWelcome to stellar-sep-0010-server 👋\n\n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n\nJavaScript SEP-0010 Server Reference Implementation\n\n🏠 Homepage\n✨ Demo\nInstall\nyarn installUsage\nyarn run startRun tests\nyarn run testAuthor\n👤 Felix Perron-Brault\n\nGithub: @fpbrault\n\nShow your support\nGive a ⭐️ if this project helped you!\n📝 License\nCopyright © 2021 Felix Perron-Brault.\nThis project is MIT licensed.\n\nThis README was generated with ❤️ by readme-md-generator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isEd25519.html":{"url":"classes/isEd25519.html","title":"class - isEd25519","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isEd25519\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the account public key is a valid Ed25519 key\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:26\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain'),\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n        true,\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      const homeDomain = this.configService.get('homeDomain');\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isNotMuxedAccount.html":{"url":"classes/isNotMuxedAccount.html","title":"class - isNotMuxedAccount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isNotMuxedAccount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        {string}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(input: string, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain'),\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n        true,\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      const homeDomain = this.configService.get('homeDomain');\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/isValidChallenge.html":{"url":"injectables/isValidChallenge.html","title":"injectable - isValidChallenge","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  isValidChallenge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the challenge transaction contains the expected operations and other parameters\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/CustomValidators.ts:134\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:166\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(input: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:143\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain'),\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n        true,\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      const homeDomain = this.configService.get('homeDomain');\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isXDR.html":{"url":"classes/isXDR.html","title":"class - isXDR","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isXDR\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the transaction is a valid XDR transaction envelope\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:87\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(input: Buffer, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:69\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    //Check if muxed account\n    if (value.startsWith('M')) {\n      try {\n        StellarSdk.MuxedAccount.fromAddress(value, '0');\n        return true;\n      } catch (error) {\n        Logger.error(error);\n        return false;\n      }\n    }\n\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   *\n   *\n   * @return {string}\n   * @memberof isEd25519\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isXDR\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n@ValidatorConstraint({ async: false })\nexport class isNotMuxedAccount implements ValidatorConstraintInterface {\n  /**\n   *\n   *\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isNotMuxedAccount\n   */\n  validate(input: string, validationArguments: ValidationArguments): boolean {\n    try {\n      const [relatedPropertyName] = validationArguments.constraints;\n      const relatedValue = (validationArguments.object as any)[\n        relatedPropertyName\n      ];\n      return !relatedValue.startsWith('M');\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n  }\n\n  /**\n   *\n   *\n   * @return {*}  {string}\n   * @memberof isNotMuxedAccount\n   */\n  defaultMessage(): string {\n    return 'Account is a muxed account!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\n@Injectable()\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        this.configService.get('source.keypair').publicKey(),\n        this.configService.get('networkPassphrase'),\n        this.configService.get('homeDomain'),\n        this.configService.get('homeDomain'),\n      );\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof isValidChallenge\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\n@Injectable()\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  constructor(private configService: ConfigService) {}\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(\n        input,\n        this.configService.get('networkPassphrase'),\n        true,\n      );\n\n      const server: StellarSdk.Server = new StellarSdk.Server(\n        this.configService.get('horizonServer'),\n      );\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      const homeDomain = this.configService.get('homeDomain');\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          this.configService.get('source.keypair').publicKey(),\n          this.configService.get('networkPassphrase'),\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          `${homeDomain}`,\n          `${homeDomain}`,\n        );\n      }\n    } catch (error) {\n      Logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Felix Perron-Brault\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomValidatorsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CustomValidatorsModule\n\n\n\ncluster_CustomValidatorsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCustomValidatorsModule\n\nCustomValidatorsModule\n\nAppModule -->\n\nCustomValidatorsModule->AppModule\n\n\n\n\n\nChallengeService\n\nChallengeService\n\nAuthModule -->\n\nChallengeService->AuthModule\n\n\n\nAppModule -->\n\nChallengeService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nhasValidSignatures\n\nhasValidSignatures\n\nCustomValidatorsModule -->\n\nhasValidSignatures->CustomValidatorsModule\n\n\n\n\n\nisValidChallenge\n\nisValidChallenge\n\nCustomValidatorsModule -->\n\nisValidChallenge->CustomValidatorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChallengeResponse   (src/.../auth.controller.ts)\n                        \n                        \n                            ChallengeResponse   (src/.../challenge.service.ts)\n                        \n                        \n                            DecodedTokenResponse   (src/.../token.service.ts)\n                        \n                        \n                            TokenResponse   (src/.../auth.controller.ts)\n                        \n                        \n                            TokenResponse   (src/.../token.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    ChallengeResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    src/challenge/challenge.service.ts\n    \n    \n        \n            \n                \n                    \n                    ChallengeResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    src/token/token.service.ts\n    \n    \n        \n            \n                \n                    \n                    DecodedTokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HOME_DOMAIN   (src/.../challenge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/challenge.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HOME_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.HOME_DOMAIN\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
