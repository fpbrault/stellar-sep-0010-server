var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.546,1,1.757]],["body/controllers/AppController.html",[0,2.375,1,2.963,2,1.874,3,0.641,4,0.641,5,0.556,6,2.877,7,0.556,8,1.494,9,3.646,10,3.527,11,2.13,12,0.045,13,3.527,14,0.936,15,3.527,16,4.47,17,1.64,18,2.375,19,2.106,20,1.052,21,1.179,22,0.641,23,1.052,24,4.907,25,1.673,26,0.938,27,3.527,28,2.449,29,1.179,30,2.13,31,3.527,32,3.527,33,1.837,34,3.104,35,2.13,36,4.47,37,2.13,38,0.641,39,0.082,40,3.527,41,1.874,42,1.32,43,1.494,44,1.32,45,3.527,46,3.527,47,3.527,48,3.527,49,0.034,50,0.034]],["title/modules/AppModule.html",[51,1.757,52,1.757]],["body/modules/AppModule.html",[1,3.008,2,2.425,3,0.663,4,0.663,5,0.575,12,0.045,26,0.977,29,1.219,33,2.053,35,2.201,38,0.663,39,0.085,49,0.035,50,0.035,51,2.756,52,3.451,53,1.937,54,2.425,55,2.974,56,2.974,57,2.974,58,2.914,59,2.301,60,3.169,61,2.532,62,2.201,63,3.646,64,3.723,65,3.723,66,3.646,67,3.646,68,2.532]],["title/controllers/AuthController.html",[0,1.546,69,1.757]],["body/controllers/AuthController.html",[0,1.475,2,1.475,3,0.504,4,0.504,5,0.438,7,0.438,8,1.275,11,2.303,12,0.045,14,1.012,17,1.569,19,2.613,20,1.137,21,1.275,22,0.853,23,1.137,25,1.904,26,0.947,29,0.928,33,1.632,35,1.676,38,0.504,39,0.065,41,2.027,42,1.428,43,1.569,44,1.428,49,0.029,50,0.029,59,1.829,68,1.927,69,2.834,70,1.927,71,2.775,72,1.164,73,1.904,74,3.556,75,3.829,76,2.264,77,1.482,78,2.775,79,3.112,80,2.027,81,2.027,82,2.264,83,4.359,84,2.775,85,3.112,86,1.6,87,3.112,88,2.775,89,3.815,90,1.164,91,0.828,92,1.039,93,1.275,94,2.775,95,1.039,96,1.927,97,1.039,98,1.306,99,1.039,100,1.927,101,2.775,102,2.264,103,1.6,104,2.775,105,2.775,106,2.775]],["title/modules/AuthModule.html",[51,1.757,58,1.546]],["body/modules/AuthModule.html",[2,2.41,3,0.656,4,0.656,5,0.569,12,0.045,26,0.994,29,1.206,33,2.048,35,2.179,38,0.656,39,0.084,49,0.034,50,0.034,51,2.738,53,1.918,54,2.41,58,3.032,59,2.295,60,3.149,61,2.506,62,2.179,64,3.699,65,2.944,68,2.506,69,2.994,107,2.944,108,2.944,109,2.907,110,3.609,111,3.609,112,3.609,113,4.535,114,2.179]],["title/classes/Challenge.html",[39,0.068,77,0.772]],["body/classes/Challenge.html",[3,0.399,4,0.399,5,0.346,7,0.346,11,2.549,12,0.044,14,1.12,22,0.855,23,1.403,26,0.767,28,1.524,37,1.325,38,0.587,39,0.089,41,2.823,49,0.025,50,0.025,77,1.291,80,1.715,81,1.715,91,1.259,93,1.079,95,0.822,97,1.209,98,1.324,115,0.921,116,1.524,117,1.684,118,2.242,119,2.251,120,3.124,121,1.411,122,4.283,123,1.791,124,2.615,125,4.222,126,3.228,127,3.228,128,3.228,129,4.222,130,2.195,131,1.521,132,1.354,133,1.521,134,1.715,135,1.521,136,1.209,137,2.195,138,3.829,139,2.026,140,3.228,141,3.829,142,3.228,143,1.715,144,3.228,145,4.222,146,3.228,147,4.222,148,3.228,149,4.222,150,1.626,151,2.549,152,4.222,153,3.228,154,2.634,155,2.195,156,2.195,157,1.761,158,3.228,159,3.228,160,3.228,161,3.228,162,2.634,163,3.228,164,3.228,165,2.634,166,3.228,167,1.209,168,3.228,169,3.228,170,3.228,171,2.195,172,2.195,173,3.228,174,3.228,175,1.209,176,3.228,177,3.228,178,3.228,179,3.228,180,2.195,181,3.228,182,2.195,183,2.634,184,4.222,185,2.195,186,3.829,187,2.195,188,4.222,189,0.921,190,0.921,191,0.921,192,1.791,193,0.921,194,0.734,195,1.791,196,2.195,197,2.195,198,2.195,199,2.195]],["title/injectables/ChallengeService.html",[59,1.221,200,0.973]],["body/injectables/ChallengeService.html",[3,0.369,4,0.369,5,0.32,7,0.32,8,1.018,12,0.045,14,0.97,17,1.358,20,0.908,21,1.018,22,0.886,23,0.908,25,1.712,26,0.831,29,0.679,38,0.665,39,0.071,41,1.943,42,1.141,43,1.455,44,1.141,49,0.023,50,0.023,59,1.827,72,0.852,73,1.712,74,2.485,76,2.485,77,1.387,79,2.485,80,2.159,81,2.159,90,0.852,91,1.212,92,1.141,93,1.018,95,0.76,96,1.41,97,1.521,98,1.402,99,1.63,103,1.705,117,0.76,118,2.115,119,0.852,120,3.868,121,1.222,122,1.656,124,1.435,132,0.852,135,1.435,136,1.369,139,1.369,150,1.018,151,1.839,157,0.76,167,1.141,175,0.76,193,1.989,194,1.358,200,1.018,201,1.079,202,1.226,203,2.485,204,2.115,205,4.063,206,3.657,207,2.03,208,2.03,209,2.03,210,3.046,211,3.046,212,2.03,213,3.046,214,4.063,215,2.03,216,2.485,217,0.852,218,0.957,219,0.957,220,1.435,221,1.278,222,0.957,223,0.852,224,1.278,225,0.957,226,0.852,227,0.852,228,0.852,229,0.852,230,1.079,231,4.063,232,1.619,233,2.03,234,2.03,235,2.03,236,2.03,237,2.03,238,3.046,239,2.03,240,2.03,241,2.03,242,2.03,243,2.03,244,2.03,245,3.046,246,2.03,247,1.079,248,2.03,249,2.03,250,2.03,251,2.03,252,3.046,253,2.03,254,3.046,255,2.03,256,3.046,257,2.03,258,2.03,259,2.03,260,2.03,261,3.046,262,3.046,263,2.03,264,2.03,265,2.03,266,2.03,267,2.03,268,2.03,269,3.046,270,2.03,271,2.03,272,2.03,273,2.03,274,2.03,275,2.03,276,2.03]],["title/injectables/JwtAuthGuard.html",[30,1.757,200,0.973]],["body/injectables/JwtAuthGuard.html",[3,0.775,4,0.775,5,0.673,12,0.044,26,0.912,29,1.426,30,3.031,38,0.775,39,0.099,49,0.038,50,0.038,114,2.575,200,1.678,201,2.266,277,3.479,278,3.479,279,4.265,280,3.479,281,4.265]],["title/injectables/JwtStrategy.html",[109,1.546,200,0.973]],["body/injectables/JwtStrategy.html",[3,0.661,4,0.661,5,0.573,7,0.573,8,1.523,12,0.045,14,1.209,17,1.216,18,1.932,20,1.084,21,1.216,22,0.661,23,1.084,26,0.948,29,1.216,38,0.661,39,0.085,43,1.216,49,0.035,50,0.035,73,1.863,102,4.059,109,2.421,114,2.196,189,1.912,200,1.523,201,1.932,280,2.967,282,2.967,283,3.637,284,4.557,285,3.637,286,2.967,287,3.637,288,3.637,289,3.637,290,2.967,291,3.637,292,2.525,293,3.637,294,3.637,295,3.637,296,3.637,297,3.637,298,3.637,299,1.932,300,3.637,301,3.637,302,3.637,303,3.637,304,3.637,305,3.637]],["title/classes/Token.html",[19,1.371,39,0.068]],["body/classes/Token.html",[3,0.585,4,0.585,5,0.508,7,0.508,11,1.944,12,0.045,14,0.854,19,2.438,20,1.257,22,0.585,26,0.854,28,2.927,37,1.944,38,0.766,39,0.109,41,2.497,49,0.032,50,0.032,77,1.323,80,2.24,81,2.24,86,1.971,97,2.125,98,1.118,115,1.351,117,1.578,118,2.927,123,2.627,131,2.501,133,2.501,183,3.439,189,1.351,190,1.351,192,2.627,306,2.627,307,2.821,308,4.985,309,4.215,310,3.22,311,3.22,312,3.22,313,2.24,314,2.24,315,2.24,316,2.24,317,3.22,318,1.351,319,1.351,320,1.351,321,3.22,322,3.22,323,3.22,324,3.22]],["title/injectables/TokenService.html",[33,1.089,200,0.973]],["body/injectables/TokenService.html",[3,0.471,4,0.471,5,0.409,7,0.409,8,1.216,9,2.967,12,0.045,14,0.965,17,1.523,18,2.422,19,2.662,20,1.085,21,1.216,22,0.904,23,1.085,25,1.797,26,0.872,29,0.866,33,1.706,34,1.799,38,0.764,39,0.085,42,0.97,43,1.405,44,0.97,49,0.028,50,0.028,72,1.087,73,1.863,75,3.718,77,0.965,82,2.967,85,2.967,86,1.763,87,2.967,90,1.087,91,0.773,92,0.97,93,1.216,95,0.97,98,1.384,100,3.165,117,0.97,121,1.216,136,0.97,139,0.97,157,0.97,167,0.97,175,0.97,193,2.014,194,0.866,200,1.216,201,1.377,203,2.967,204,2.919,223,1.087,224,1.087,226,1.087,227,1.087,228,1.087,229,1.087,286,2.114,325,1.565,326,3.637,327,3.637,328,2.591,329,2.591,330,3.637,331,3.637,332,2.114,333,2.114,334,2.526,335,2.114,336,2.591,337,2.591,338,2.591,339,2.591,340,2.591,341,2.591,342,2.591,343,3.637,344,3.637,345,2.591,346,2.591,347,2.591,348,3.637,349,2.591]],["title/coverage.html",[350,3.214]],["body/coverage.html",[0,2.11,1,1.777,5,0.464,6,2.402,12,0.045,19,1.387,22,0.535,30,1.777,33,1.102,39,0.12,49,0.03,50,0.03,59,1.235,69,1.777,70,2.044,77,0.781,99,1.487,109,1.564,116,2.758,121,1.608,150,0.984,191,1.235,194,0.984,200,1.608,202,3.033,217,1.666,221,1.666,277,2.402,278,2.402,282,2.402,292,2.044,306,2.402,318,1.235,319,1.235,320,1.235,325,2.713,334,2.758,350,2.402,351,2.402,352,2.944,353,2.944,354,2.568,355,5.693,356,4.811,357,5.666,358,5.558,359,3.971,360,3.971,361,3.971,362,3.971,363,3.24,364,2.75,365,5.023,366,2.944,367,2.944,368,2.944,369,2.944,370,2.944,371,2.402,372,2.944,373,2.402,374,2.944,375,2.944]],["title/dependencies.html",[54,1.855,376,2.446]],["body/dependencies.html",[12,0.045,18,1.968,29,1.238,37,2.236,39,0.107,49,0.035,50,0.035,54,1.968,91,1.104,92,1.387,93,1.238,114,2.236,190,1.554,216,3.021,290,4.093,332,3.021,377,5.018,378,3.704,379,3.704,380,3.704,381,3.704,382,3.704,383,3.704,384,3.76,385,3.704,386,3.704,387,3.704,388,3.704,389,3.704,390,3.704,391,3.704,392,3.704,393,3.704,394,3.704,395,3.704,396,3.704,397,3.704,398,3.704,399,3.704,400,3.704,401,3.704,402,3.704,403,3.704,404,3.704,405,3.704,406,3.704,407,3.704,408,3.704,409,3.704,410,3.704]],["title/miscellaneous/functions.html",[411,1.152,412,2.848]],["body/miscellaneous/functions.html",[7,0.707,12,0.039,49,0.039,50,0.039,371,3.657,373,4.442,411,2.112,412,3.657,413,4.483]],["title/classes/hasValidSignatures.html",[39,0.068,318,1.221]],["body/classes/hasValidSignatures.html",[3,0.293,4,0.293,5,0.254,7,0.254,8,0.851,12,0.046,14,0.676,17,0.851,20,0.759,21,1.309,22,0.757,23,0.48,25,1.183,26,0.574,38,0.822,39,0.108,42,1.466,43,1.789,44,1.693,49,0.019,50,0.019,72,1.326,73,1.693,77,0.676,86,1.643,90,0.675,91,0.759,92,0.603,93,0.851,95,0.603,97,1.786,98,1.436,99,1.466,103,0.675,115,0.675,117,0.603,119,1.326,121,1.458,124,0.758,131,1.845,132,0.675,133,1.962,134,1.354,135,1.2,136,1.466,139,0.603,143,0.855,150,1.201,157,0.603,167,1.559,175,0.603,189,1.069,190,0.675,191,1.326,193,1.83,194,0.851,217,0.675,218,0.758,219,0.758,220,1.2,221,0.675,222,0.758,223,0.675,224,1.069,225,0.758,226,0.675,227,0.675,228,0.675,229,0.675,230,1.68,232,0.855,247,1.68,299,2.081,307,0.855,313,1.91,314,0.855,315,1.68,316,1.354,318,1.897,319,1.326,320,1.326,354,0.758,364,1.354,414,2.364,415,1.538,416,2.811,417,2.88,418,2.633,419,1.61,420,2.88,421,2.364,422,2.17,423,1.61,424,2.811,425,2.364,426,2.364,427,0.855,428,0.855,429,1.68,430,0.855,431,0.855,432,0.972,433,2.514,434,0.972,435,0.972,436,1.538,437,0.972,438,1.538,439,0.972,440,0.972,441,0.972,442,0.972,443,0.972,444,0.972,445,2.17,446,0.972,447,1.908,448,0.972,449,0.972,450,0.972,451,0.972,452,0.972,453,0.972,454,0.972,455,1.538,456,0.972,457,0.972,458,0.972,459,0.972,460,0.972,461,0.972,462,0.972,463,0.972,464,0.972,465,0.972,466,1.538,467,0.972,468,0.972,469,0.972,470,0.972,471,0.972,472,0.972]],["title/index.html",[7,0.386,473,1.995,474,1.995]],["body/index.html",[12,0.044,49,0.036,50,0.036,80,2.528,81,2.528,91,1.162,150,1.59,151,2.354,475,3.899,476,3.899,477,3.899,478,3.899,479,3.899,480,3.899,481,3.899,482,5.134,483,3.899,484,4.757,485,3.899,486,3.899,487,3.899,488,3.881,489,3.881,490,3.881,491,3.899,492,3.899,493,3.899,494,3.899,495,4.757,496,3.899,497,2.707,498,3.18,499,3.18,500,3.18,501,3.899,502,4.757,503,3.899,504,3.899,505,3.899]],["title/classes/isEd25519.html",[39,0.068,191,1.221]],["body/classes/isEd25519.html",[3,0.293,4,0.293,5,0.254,7,0.254,8,0.851,12,0.046,14,0.676,17,0.851,20,0.759,21,1.309,22,0.757,23,0.48,25,0.954,26,0.574,38,0.822,39,0.108,42,1.466,43,1.789,44,1.693,49,0.019,50,0.019,72,1.326,73,1.559,77,0.676,86,1.643,90,0.675,91,0.759,92,0.603,93,0.851,95,0.603,97,1.743,98,1.436,99,1.466,103,0.675,115,0.675,117,0.603,119,1.508,121,1.458,124,0.758,131,1.845,132,1.069,133,2.055,134,1.68,135,1.489,136,1.633,139,0.603,143,0.855,150,1.201,157,0.603,167,1.559,175,0.603,189,1.069,190,0.675,191,1.508,193,1.83,194,0.851,217,0.675,218,0.758,219,0.758,220,1.2,221,0.675,222,0.758,223,0.675,224,1.069,225,0.758,226,0.675,227,0.675,228,0.675,229,0.675,230,1.68,232,0.855,247,1.68,299,2.081,307,0.855,313,1.68,314,0.855,315,1.354,316,1.354,318,1.83,319,1.326,320,1.326,354,0.758,364,1.354,414,2.364,415,0.972,416,2.811,417,2.88,418,2.633,420,2.88,421,2.364,422,1.908,424,2.731,425,2.364,426,2.364,427,0.855,428,0.855,429,1.68,430,0.855,431,0.855,432,0.972,433,2.633,434,1.538,435,0.972,436,1.538,437,0.972,438,1.538,439,0.972,440,0.972,441,0.972,442,0.972,443,0.972,444,0.972,445,2.17,446,0.972,447,1.908,448,0.972,449,0.972,450,0.972,451,0.972,452,0.972,453,0.972,454,0.972,455,1.538,456,0.972,457,0.972,458,0.972,459,0.972,460,0.972,461,0.972,462,0.972,463,0.972,464,0.972,465,0.972,466,1.538,467,0.972,468,0.972,469,0.972,470,0.972,471,0.972,472,0.972,506,1.61,507,1.61]],["title/classes/isValidChallenge.html",[39,0.068,319,1.221]],["body/classes/isValidChallenge.html",[3,0.292,4,0.292,5,0.253,7,0.253,8,0.85,12,0.046,14,0.675,17,0.85,20,0.941,21,1.307,22,0.756,23,0.479,25,1.182,26,0.574,38,0.821,39,0.108,42,1.464,43,1.789,44,1.692,49,0.019,50,0.019,72,1.324,73,1.692,77,0.837,86,1.641,90,0.674,91,0.758,92,0.601,93,0.85,95,0.601,97,1.784,98,1.436,99,1.464,103,0.674,115,0.674,117,0.601,119,1.324,121,1.457,124,0.757,131,1.843,132,0.674,133,1.96,134,1.351,135,1.198,136,1.464,139,0.601,143,0.853,150,1.2,157,0.601,167,1.557,175,0.601,189,1.067,190,0.674,191,1.324,193,1.828,194,0.85,217,0.674,218,0.757,219,0.757,220,1.198,221,0.674,222,0.757,223,0.674,224,1.067,225,0.757,226,0.674,227,0.674,228,0.674,229,0.674,230,1.677,232,0.853,247,1.677,299,2.078,307,0.853,313,1.677,314,0.853,315,1.351,316,1.351,318,1.828,319,1.506,320,1.324,354,0.757,364,1.351,414,2.361,415,0.97,416,2.809,417,2.878,418,2.631,420,2.878,421,2.361,422,2.167,424,2.809,425,2.361,426,2.361,427,0.853,428,0.853,429,1.677,430,0.853,431,0.853,432,0.97,433,2.512,434,0.97,435,0.97,436,1.535,437,0.97,438,1.535,439,0.97,440,0.97,441,1.535,442,1.535,443,1.535,444,0.97,445,2.167,446,0.97,447,1.906,448,0.97,449,0.97,450,0.97,451,0.97,452,0.97,453,0.97,454,0.97,455,1.535,456,0.97,457,0.97,458,0.97,459,0.97,460,0.97,461,0.97,462,0.97,463,0.97,464,0.97,465,0.97,466,1.535,467,0.97,468,0.97,469,0.97,470,0.97,471,0.97,472,0.97,508,1.606,509,1.606]],["title/classes/isXDR.html",[39,0.068,320,1.221]],["body/classes/isXDR.html",[3,0.292,4,0.292,5,0.253,7,0.253,8,0.849,12,0.046,14,0.674,17,0.849,20,0.757,21,1.307,22,0.756,23,0.478,25,0.951,26,0.573,38,0.821,39,0.108,42,1.463,43,1.788,44,1.691,49,0.019,50,0.019,72,1.323,73,1.557,77,0.674,86,1.744,90,0.673,91,0.757,92,0.601,93,0.849,95,0.601,97,1.82,98,1.42,99,1.463,103,0.673,115,0.673,117,0.601,119,1.323,121,1.456,124,0.756,131,1.842,132,0.673,133,2.052,134,1.35,135,1.197,136,1.463,139,0.601,143,0.852,150,1.199,157,0.601,167,1.557,175,0.601,189,1.066,190,0.673,191,1.323,193,1.827,194,0.849,217,0.673,218,0.756,219,0.756,220,1.197,221,0.673,222,0.756,223,0.673,224,1.066,225,0.756,226,0.673,227,0.673,228,0.673,229,0.673,230,1.676,232,0.852,247,1.676,299,2.077,307,0.852,313,1.676,314,0.852,315,1.35,316,1.35,318,1.827,319,1.323,320,1.505,354,0.756,364,1.35,414,2.36,415,0.969,416,2.808,417,2.877,418,2.63,420,2.877,421,2.36,422,2.166,424,2.808,425,2.36,426,2.808,427,0.852,428,0.852,429,1.676,430,0.852,431,0.852,432,0.969,433,2.63,434,0.969,435,0.969,436,1.904,437,0.969,438,2.166,439,0.969,440,0.969,441,0.969,442,0.969,443,0.969,444,0.969,445,2.166,446,0.969,447,1.904,448,0.969,449,0.969,450,0.969,451,0.969,452,0.969,453,0.969,454,0.969,455,1.534,456,0.969,457,0.969,458,0.969,459,0.969,460,0.969,461,0.969,462,0.969,463,0.969,464,0.969,465,0.969,466,1.534,467,0.969,468,0.969,469,0.969,470,0.969,471,0.969,472,0.969,510,1.604,511,1.604]],["title/license.html",[473,1.995,474,1.995,497,1.698]],["body/license.html",[12,0.034,49,0.034,50,0.034,62,2.124,154,2.87,162,3.64,165,2.87,351,2.87,384,2.87,488,2.87,489,2.87,490,2.87,497,2.443,498,3.998,499,2.87,500,2.87,512,3.518,513,4.463,514,3.518,515,3.518,516,3.518,517,3.518,518,3.518,519,3.518,520,4.463,521,5.64,522,3.518,523,3.518,524,3.518,525,4.901,526,3.518,527,4.463,528,3.518,529,3.518,530,3.518,531,3.518,532,3.518,533,3.518,534,3.518,535,3.518,536,3.518,537,4.463,538,3.518,539,3.518,540,3.518,541,3.518,542,3.518,543,3.518,544,3.518,545,4.463,546,4.463,547,3.518,548,3.518,549,3.518,550,3.518,551,3.518,552,3.518,553,3.518,554,3.518,555,3.518,556,3.518,557,3.518,558,3.518,559,3.518,560,3.518,561,3.518,562,3.518,563,3.518,564,3.518,565,3.518,566,3.518,567,3.518,568,3.518,569,3.518,570,3.518,571,3.518,572,3.518,573,3.518]],["title/modules.html",[53,2.094]],["body/modules.html",[12,0.039,49,0.039,50,0.039,52,2.681,53,2.359,58,2.359,151,3.103,574,5.139,575,5.139,576,5.139]],["title/overview.html",[577,3.214]],["body/overview.html",[2,2.077,12,0.043,33,2.003,49,0.036,50,0.036,52,3.442,53,2.077,54,2.532,55,3.189,56,3.189,57,3.189,58,3.051,59,2.245,60,3.309,61,2.715,62,2.36,107,3.189,108,3.189,109,2.731,115,1.64,201,2.077,577,3.189,578,4.765,579,3.91,580,3.91]],["title/miscellaneous/typealiases.html",[411,1.152,581,3.491]],["body/miscellaneous/typealiases.html",[7,0.638,12,0.043,22,1.022,34,3.377,49,0.037,50,0.037,70,2.808,96,3.758,98,1.469,100,3.758,202,2.442,325,2.442,411,1.905,582,4.044,583,4.864,584,3.299,585,3.968,586,5.537]],["title/miscellaneous/variables.html",[411,1.152,587,2.848]],["body/miscellaneous/variables.html",[7,0.443,12,0.045,18,1.492,22,1.01,49,0.029,50,0.029,98,1.412,99,1.766,103,1.614,116,1.95,119,1.614,121,1.778,132,2.361,136,1.642,139,1.642,150,1.747,157,1.642,167,2.136,175,1.642,194,1.286,195,2.291,202,1.696,204,1.95,217,1.979,218,1.812,219,1.812,220,1.812,221,1.979,222,1.812,223,1.84,224,1.979,225,1.812,226,1.614,227,1.614,228,1.614,229,1.614,292,2.671,325,1.696,333,3.138,334,3.431,335,3.138,354,1.323,363,2.291,411,1.323,427,1.492,428,1.492,429,2.044,430,1.492,431,1.492,584,3.849,585,3.138,587,2.291,588,4.942,589,2.809,590,3.846,591,2.809]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":364,"title":{},"body":{"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["0.1.13",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":388,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["0010",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"index.html":{}}}],["1.0.0",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":344,"title":{},"body":{"injectables/TokenService.html":{}}}],["10.0.0",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":578,"title":{},"body":{"overview.html":{}}}],["2/3",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["2015",{"_index":229,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["2021",{"_index":499,"title":{},"body":{"index.html":{},"license.html":{}}}],["3.0.0",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":276,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["32",{"_index":181,"title":{},"body":{"classes/Challenge.html":{}}}],["4",{"_index":579,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["4.7.6",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["5.0.9",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":580,"title":{},"body":{"overview.html":{}}}],["66",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["8.3.0",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":346,"title":{},"body":{"injectables/TokenService.html":{}}}],["above",{"_index":544,"title":{},"body":{"license.html":{}}}],["accept",{"_index":237,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["account",{"_index":119,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["action",{"_index":567,"title":{},"body":{"license.html":{}}}],["add",{"_index":262,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["added",{"_index":273,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["addition",{"_index":144,"title":{},"body":{"classes/Challenge.html":{}}}],["aliases",{"_index":582,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":535,"title":{},"body":{"license.html":{}}}],["apibearerauth",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["apiproperty",{"_index":183,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{}}}],["apiproperty({description",{"_index":123,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{}}}],["apipropertyoptional",{"_index":184,"title":{},"body":{"classes/Challenge.html":{}}}],["apipropertyoptional({description",{"_index":138,"title":{},"body":{"classes/Challenge.html":{}}}],["app.controller",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":571,"title":{},"body":{"license.html":{}}}],["associated",{"_index":522,"title":{},"body":{"license.html":{}}}],["assume",{"_index":166,"title":{},"body":{"classes/Challenge.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["attach",{"_index":173,"title":{},"body":{"classes/Challenge.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["auth.controller",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.guard.ts",{"_index":278,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":69,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":129,"title":{},"body":{"classes/Challenge.html":{}}}],["authguard",{"_index":279,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":281,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":58,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":560,"title":{},"body":{"license.html":{}}}],["await",{"_index":232,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["backwards",{"_index":168,"title":{},"body":{"classes/Challenge.html":{}}}],["badrequestexception",{"_index":213,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["base64",{"_index":307,"title":{},"body":{"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["beta",{"_index":267,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["beta.1",{"_index":271,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["body",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":433,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["bootstrap",{"_index":373,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brault",{"_index":490,"title":{},"body":{"index.html":{},"license.html":{}}}],["browse",{"_index":576,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":574,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":438,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["c",{"_index":512,"title":{},"body":{"license.html":{}}}],["catch",{"_index":247,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["challenge",{"_index":77,"title":{"classes/Challenge.html":{}},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["challenge.account",{"_index":256,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.client_domain",{"_index":252,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.home_domain",{"_index":254,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge.memo",{"_index":260,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["challenge/challenge.service",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["challengeresponse",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"miscellaneous/typealiases.html":{}}}],["challengeservice",{"_index":59,"title":{"injectables/ChallengeService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"coverage.html":{},"overview.html":{}}}],["charge",{"_index":517,"title":{},"body":{"license.html":{}}}],["check",{"_index":455,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["claim",{"_index":563,"title":{},"body":{"license.html":{}}}],["class",{"_index":39,"title":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["classes",{"_index":115,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"overview.html":{}}}],["client",{"_index":124,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["client_domain",{"_index":120,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{}}}],["client_domain_signing_key",{"_index":231,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["clientaccount",{"_index":459,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccount.signers",{"_index":472,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clientaccount.thresholds.high_threshold",{"_index":466,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["clients",{"_index":141,"title":{},"body":{"classes/Challenge.html":{}}}],["clients'})@isin(['undefined'])@isfqdn()@isoptional",{"_index":171,"title":{},"body":{"classes/Challenge.html":{}}}],["cluster_appmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["compatibility",{"_index":169,"title":{},"body":{"classes/Challenge.html":{}}}],["conditions",{"_index":543,"title":{},"body":{"license.html":{}}}],["connection",{"_index":572,"title":{},"body":{"license.html":{}}}],["const",{"_index":193,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["constants",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["contains",{"_index":441,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["content",{"_index":239,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["contract",{"_index":568,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["copies",{"_index":537,"title":{},"body":{"license.html":{}}}],["copy",{"_index":520,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":498,"title":{},"body":{"index.html":{},"license.html":{}}}],["coverage",{"_index":350,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["customvalidators",{"_index":192,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{}}}],["cz",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["damages",{"_index":564,"title":{},"body":{"license.html":{}}}],["deal",{"_index":524,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":573,"title":{},"body":{"license.html":{}}}],["decode",{"_index":449,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["decodedtoken",{"_index":348,"title":{},"body":{"injectables/TokenService.html":{}}}],["decodedtokenresponse",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["decodes",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/TokenService.html":{}}}],["decodetoken(@request",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken(req",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["decodetoken(token",{"_index":327,"title":{},"body":{"injectables/TokenService.html":{}}}],["decoding",{"_index":326,"title":{},"body":{"injectables/TokenService.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"classes/Token.html":{}}}],["default",{"_index":167,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":418,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["demo",{"_index":480,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":117,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["details",{"_index":197,"title":{},"body":{"classes/Challenge.html":{}}}],["details.'})@isoptional()@isbytelength(0",{"_index":180,"title":{},"body":{"classes/Challenge.html":{}}}],["distribute",{"_index":533,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":351,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["domain",{"_index":139,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["domains",{"_index":161,"title":{},"body":{"classes/Challenge.html":{}}}],["dotenv",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["dotenv.config",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["ed25519",{"_index":134,"title":{},"body":{"classes/Challenge.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["ed25519key",{"_index":432,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["encoded",{"_index":308,"title":{},"body":{"classes/Token.html":{}}}],["envelope",{"_index":436,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["enveloppe",{"_index":322,"title":{},"body":{"classes/Token.html":{}}}],["enveloppe!'})@validate(isvalidchallenge",{"_index":311,"title":{},"body":{"classes/Token.html":{}}}],["error",{"_index":421,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["event",{"_index":559,"title":{},"body":{"license.html":{}}}],["exists",{"_index":210,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["exp",{"_index":345,"title":{},"body":{"injectables/TokenService.html":{}}}],["expected",{"_index":442,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["export",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["express",{"_index":384,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":280,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":288,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["felix",{"_index":488,"title":{},"body":{"index.html":{},"license.html":{}}}],["fetch",{"_index":214,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["files",{"_index":523,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":555,"title":{},"body":{"license.html":{}}}],["following",{"_index":542,"title":{},"body":{"license.html":{}}}],["fpbrault",{"_index":492,"title":{},"body":{"index.html":{}}}],["free",{"_index":516,"title":{},"body":{"license.html":{}}}],["function",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":412,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":540,"title":{},"body":{"license.html":{}}}],["g",{"_index":125,"title":{},"body":{"classes/Challenge.html":{}}}],["generate",{"_index":158,"title":{},"body":{"classes/Challenge.html":{}}}],["generatechallenge",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generatechallenge(challenge",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generated",{"_index":503,"title":{},"body":{"index.html":{}}}],["generates",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{}}}],["generatetoken",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["generatetoken(@body",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetoken(token",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["generation",{"_index":204,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"miscellaneous/variables.html":{}}}],["generator",{"_index":505,"title":{},"body":{"index.html":{}}}],["get('profile",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["gets",{"_index":272,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getsigningkey",{"_index":206,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getsigningkey(client_domain",{"_index":208,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["getting",{"_index":473,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["github",{"_index":491,"title":{},"body":{"index.html":{}}}],["give",{"_index":494,"title":{},"body":{"index.html":{}}}],["granted",{"_index":515,"title":{},"body":{"license.html":{}}}],["handles",{"_index":203,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{}}}],["hasvalidsignatures",{"_index":318,"title":{"classes/hasValidSignatures.html":{}},"body":{"classes/Token.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["headers",{"_index":236,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["helped",{"_index":496,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":514,"title":{},"body":{"license.html":{}}}],["high_threshold",{"_index":461,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["higher",{"_index":462,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["holders",{"_index":561,"title":{},"body":{"license.html":{}}}],["home",{"_index":157,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["home_domain",{"_index":121,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["homepage",{"_index":479,"title":{},"body":{"index.html":{}}}],["hopes",{"_index":164,"title":{},"body":{"classes/Challenge.html":{}}}],["horizon",{"_index":428,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["https",{"_index":235,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["https://github.com/stellar/js",{"_index":269,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["https://horizon",{"_index":430,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["iat",{"_index":342,"title":{},"body":{"injectables/TokenService.html":{}}}],["id",{"_index":176,"title":{},"body":{"classes/Challenge.html":{}}}],["identifier",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":163,"title":{},"body":{"classes/Challenge.html":{}}}],["ignore",{"_index":148,"title":{},"body":{"classes/Challenge.html":{}}}],["ignoreexpiration",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implementation",{"_index":478,"title":{},"body":{"index.html":{}}}],["implements",{"_index":416,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["implied",{"_index":551,"title":{},"body":{"license.html":{}}}],["import",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["imports",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["included",{"_index":154,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["including",{"_index":527,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"miscellaneous/functions.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["injectable",{"_index":200,"title":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{}},"body":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["injectables",{"_index":201,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"overview.html":{}}}],["input",{"_index":424,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["install",{"_index":481,"title":{},"body":{"index.html":{}}}],["installusage",{"_index":483,"title":{},"body":{"index.html":{}}}],["intend",{"_index":142,"title":{},"body":{"classes/Challenge.html":{}}}],["isbytelength",{"_index":185,"title":{},"body":{"classes/Challenge.html":{}}}],["isbytelength(0",{"_index":198,"title":{},"body":{"classes/Challenge.html":{}}}],["ised25519",{"_index":191,"title":{"classes/isEd25519.html":{}},"body":{"classes/Challenge.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["isfqdn",{"_index":186,"title":{},"body":{"classes/Challenge.html":{}}}],["isin",{"_index":187,"title":{},"body":{"classes/Challenge.html":{}}}],["isin([home_domain.hostname",{"_index":199,"title":{},"body":{"classes/Challenge.html":{}}}],["isoptional",{"_index":188,"title":{},"body":{"classes/Challenge.html":{}}}],["iss",{"_index":339,"title":{},"body":{"injectables/TokenService.html":{}}}],["isvalidchallenge",{"_index":319,"title":{"classes/isValidChallenge.html":{}},"body":{"classes/Token.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["isxdr",{"_index":320,"title":{"classes/isXDR.html":{}},"body":{"classes/Token.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["javascript",{"_index":476,"title":{},"body":{"index.html":{}}}],["js",{"_index":264,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["jsonwebtoken",{"_index":332,"title":{},"body":{"injectables/TokenService.html":{},"dependencies.html":{}}}],["jtw",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["jwt",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.decode(token.tostring",{"_index":349,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.jwtpayload",{"_index":336,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.sign(payload",{"_index":347,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt.strategy",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret",{"_index":334,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":30,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":109,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":136,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["keypair",{"_index":219,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["kind",{"_index":550,"title":{},"body":{"license.html":{}}}],["known/stellar.toml",{"_index":234,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["liability",{"_index":565,"title":{},"body":{"license.html":{}}}],["liable",{"_index":562,"title":{},"body":{"license.html":{}}}],["license",{"_index":497,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":501,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":528,"title":{},"body":{"license.html":{}}}],["limited",{"_index":552,"title":{},"body":{"license.html":{}}}],["literal",{"_index":586,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":205,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["logger(challengeservice.name",{"_index":211,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["m",{"_index":127,"title":{},"body":{"classes/Challenge.html":{}}}],["matching",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":504,"title":{},"body":{"index.html":{}}}],["meet",{"_index":314,"title":{},"body":{"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["meets",{"_index":465,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["memberof",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["memo",{"_index":122,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{}}}],["merchantability",{"_index":554,"title":{},"body":{"license.html":{}}}],["merge",{"_index":531,"title":{},"body":{"license.html":{}}}],["message",{"_index":131,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["metadata",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":240,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["miscellaneous",{"_index":411,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":500,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":530,"title":{},"body":{"license.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":268,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["multiple",{"_index":160,"title":{},"body":{"classes/Challenge.html":{}}}],["muxed",{"_index":126,"title":{},"body":{"classes/Challenge.html":{}}}],["name",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"classes/Challenge.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["network",{"_index":224,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["network_passphrase",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["new",{"_index":194,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":215,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["noninfringement",{"_index":558,"title":{},"body":{"license.html":{}}}],["notice",{"_index":545,"title":{},"body":{"license.html":{}}}],["null",{"_index":246,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["object",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtaining",{"_index":519,"title":{},"body":{"license.html":{}}}],["officially",{"_index":266,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["older",{"_index":170,"title":{},"body":{"classes/Challenge.html":{}}}],["once",{"_index":263,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["operations",{"_index":443,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["optional",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["otherwise",{"_index":570,"title":{},"body":{"license.html":{}}}],["out",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":577,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":376,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["parameter",{"_index":149,"title":{},"body":{"classes/Challenge.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["parseint(xdr.timebounds.mintime",{"_index":343,"title":{},"body":{"injectables/TokenService.html":{}}}],["particular",{"_index":556,"title":{},"body":{"license.html":{}}}],["passphrase",{"_index":225,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload",{"_index":286,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{}}}],["payload.sub",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":513,"title":{},"body":{"license.html":{}}}],["permit",{"_index":538,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":174,"title":{},"body":{"classes/Challenge.html":{}}}],["perron",{"_index":489,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":518,"title":{},"body":{"license.html":{}}}],["persons",{"_index":539,"title":{},"body":{"license.html":{}}}],["portions",{"_index":548,"title":{},"body":{"license.html":{}}}],["post",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["present",{"_index":415,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["previously",{"_index":330,"title":{},"body":{"injectables/TokenService.html":{}}}],["private",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["process.env.home_domain",{"_index":223,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":335,"title":{},"body":{"injectables/TokenService.html":{},"miscellaneous/variables.html":{}}}],["process.env.server_private_key",{"_index":218,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":495,"title":{},"body":{"index.html":{}}}],["promise",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["properties",{"_index":118,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{}}}],["provide",{"_index":463,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["provided",{"_index":165,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["providers",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["public",{"_index":135,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["publish",{"_index":532,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":557,"title":{},"body":{"license.html":{}}}],["query",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["readme",{"_index":502,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{}}}],["received",{"_index":450,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["reference",{"_index":477,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["representation",{"_index":452,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["req",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"classes/Challenge.html":{},"classes/Token.html":{}}}],["request.'})@isfqdn()@isoptional",{"_index":155,"title":{},"body":{"classes/Challenge.html":{}}}],["required",{"_index":315,"title":{},"body":{"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["reset",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["response.text",{"_index":243,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["restriction",{"_index":526,"title":{},"body":{"license.html":{}}}],["results",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":454,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["return",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["returns",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["rights",{"_index":529,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":484,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["sdf",{"_index":227,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["sdk/issues/668",{"_index":274,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["sdk/releases/tag/v9.0.0",{"_index":270,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["secret",{"_index":333,"title":{},"body":{"injectables/TokenService.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":179,"title":{},"body":{"classes/Challenge.html":{}}}],["see",{"_index":145,"title":{},"body":{"classes/Challenge.html":{}}}],["sell",{"_index":536,"title":{},"body":{"license.html":{}}}],["sep",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"index.html":{}}}],["september",{"_index":228,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":150,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["server.'})@validate(ised25519",{"_index":130,"title":{},"body":{"classes/Challenge.html":{}}}],["server.loadaccount(xdr.operations[0].source",{"_index":460,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["servers",{"_index":147,"title":{},"body":{"classes/Challenge.html":{}}}],["shall",{"_index":546,"title":{},"body":{"license.html":{}}}],["show",{"_index":493,"title":{},"body":{"index.html":{}}}],["signature",{"_index":457,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["signatures",{"_index":313,"title":{},"body":{"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["signed",{"_index":309,"title":{},"body":{"classes/Token.html":{}}}],["signing_key",{"_index":250,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["software",{"_index":521,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["sourcekeypair",{"_index":221,"title":{},"body":{"injectables/ChallengeService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["sourcekeypair.publickey",{"_index":447,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["sourcesecretkey",{"_index":217,"title":{},"body":{"injectables/ChallengeService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":153,"title":{},"body":{"classes/Challenge.html":{}}}],["src/.../auth.controller.ts",{"_index":583,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../challenge.service.ts",{"_index":584,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../challenge.ts",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../customvalidators.ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":413,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../token.service.ts",{"_index":585,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/constants.ts",{"_index":363,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":277,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":285,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/challenge.ts",{"_index":116,"title":{},"body":{"classes/Challenge.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/challenge.ts:29",{"_index":137,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:37",{"_index":182,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:46",{"_index":172,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge.ts:54",{"_index":156,"title":{},"body":{"classes/Challenge.html":{}}}],["src/challenge/challenge.service.ts",{"_index":202,"title":{},"body":{"injectables/ChallengeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/challenge/challenge.service.ts:40",{"_index":212,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:49",{"_index":209,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/challenge/challenge.service.ts:86",{"_index":207,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["src/customvalidators.ts",{"_index":354,"title":{},"body":{"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["src/customvalidators.ts:117",{"_index":509,"title":{},"body":{"classes/isValidChallenge.html":{}}}],["src/customvalidators.ts:139",{"_index":508,"title":{},"body":{"classes/isValidChallenge.html":{}}}],["src/customvalidators.ts:160",{"_index":423,"title":{},"body":{"classes/hasValidSignatures.html":{}}}],["src/customvalidators.ts:207",{"_index":419,"title":{},"body":{"classes/hasValidSignatures.html":{}}}],["src/customvalidators.ts:47",{"_index":507,"title":{},"body":{"classes/isEd25519.html":{}}}],["src/customvalidators.ts:57",{"_index":506,"title":{},"body":{"classes/isEd25519.html":{}}}],["src/customvalidators.ts:79",{"_index":511,"title":{},"body":{"classes/isXDR.html":{}}}],["src/customvalidators.ts:96",{"_index":510,"title":{},"body":{"classes/isXDR.html":{}}}],["src/main.ts",{"_index":371,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/token.ts",{"_index":306,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/token.ts:29",{"_index":317,"title":{},"body":{"classes/Token.html":{}}}],["src/token/token.service.ts",{"_index":325,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/token/token.service.ts:44",{"_index":329,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/token/token.service.ts:61",{"_index":328,"title":{},"body":{"injectables/TokenService.html":{}}}],["started",{"_index":474,"title":{"index.html":{},"license.html":{}},"body":{}}],["startrun",{"_index":485,"title":{},"body":{"index.html":{}}}],["statements",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["stellar",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"classes/hasValidSignatures.html":{},"index.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.keypair",{"_index":220,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["stellarsdk.keypair.fromsecret(sourcesecretkey",{"_index":222,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["stellarsdk.networks.testnet",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["stellarsdk.server",{"_index":429,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["stellarsdk.strkey.isvalided25519publickey(value",{"_index":435,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.transaction",{"_index":337,"title":{},"body":{"injectables/TokenService.html":{}}}],["stellarsdk.transaction(input",{"_index":453,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.buildchallengetx",{"_index":275,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["stellarsdk.utils.gathertxsigners",{"_index":468,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.readchallengetx",{"_index":446,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.verifychallengetxsigners",{"_index":467,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.utils.verifychallengetxthreshold",{"_index":471,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["stellarsdk.xdr.transactionenvelope.validatexdr",{"_index":439,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["strategy",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":340,"title":{},"body":{"injectables/TokenService.html":{}}}],["subject",{"_index":541,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":534,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":547,"title":{},"body":{"license.html":{}}}],["super",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["supplied",{"_index":140,"title":{},"body":{"classes/Challenge.html":{}}}],["support",{"_index":151,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"index.html":{},"modules.html":{}}}],["supported",{"_index":178,"title":{},"body":{"classes/Challenge.html":{}}}],["supports",{"_index":265,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["svg",{"_index":575,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["test",{"_index":226,"title":{},"body":{"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["testauthor",{"_index":487,"title":{},"body":{"index.html":{}}}],["testnet.stellar.org",{"_index":431,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["tests",{"_index":486,"title":{},"body":{"index.html":{}}}],["text",{"_index":242,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["text/plain",{"_index":238,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["then((data",{"_index":244,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["then((response",{"_index":241,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.challengeservice.generatechallenge(challenge",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.getsigningkey",{"_index":251,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_account",{"_index":255,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_domain",{"_index":258,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('client_domain_signing_key",{"_index":257,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('home_domain",{"_index":253,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.logger.debug('memo",{"_index":259,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["this.tokenservice.decodetoken(req.headers.authorization.slice(7",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["this.tokenservice.generatetoken(token",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["threshold",{"_index":316,"title":{},"body":{"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["thresholds",{"_index":456,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["throw",{"_index":248,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["todo",{"_index":261,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["token",{"_index":19,"title":{"classes/Token.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["token.transaction",{"_index":338,"title":{},"body":{"injectables/TokenService.html":{}}}],["token/token.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["tokenresponse",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["tokens",{"_index":159,"title":{},"body":{"classes/Challenge.html":{}}}],["tokenservice",{"_index":33,"title":{"injectables/TokenService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/TokenService.html":{},"coverage.html":{},"overview.html":{}}}],["toml",{"_index":216,"title":{},"body":{"injectables/ChallengeService.html":{},"dependencies.html":{}}}],["toml.parse(data).signing_key",{"_index":245,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["tort",{"_index":569,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["transaction!'})@validate(hasvalidsignatures",{"_index":312,"title":{},"body":{"classes/Token.html":{}}}],["transformer",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":445,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["try",{"_index":230,"title":{},"body":{"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["type",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"coverage.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":581,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":177,"title":{},"body":{"classes/Challenge.html":{}}}],["ui",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["unable",{"_index":249,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["unknown",{"_index":287,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["url",{"_index":427,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["url('/.well",{"_index":233,"title":{},"body":{"injectables/ChallengeService.html":{}}}],["url(process.env.home_domain",{"_index":195,"title":{},"body":{"classes/Challenge.html":{},"miscellaneous/variables.html":{}}}],["urlencoded",{"_index":451,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["use",{"_index":162,"title":{},"body":{"classes/Challenge.html":{},"license.html":{}}}],["used",{"_index":175,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@get('profile')@apibearerauth",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["userid",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["username",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid",{"_index":133,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate",{"_index":189,"title":{},"body":{"classes/Challenge.html":{},"injectables/JwtStrategy.html":{},"classes/Token.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate(hasvalidsignatures",{"_index":324,"title":{},"body":{"classes/Token.html":{}}}],["validate(input",{"_index":422,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validate(ised25519",{"_index":196,"title":{},"body":{"classes/Challenge.html":{}}}],["validate(isvalidchallenge",{"_index":323,"title":{},"body":{"classes/Token.html":{}}}],["validate(isxdr",{"_index":321,"title":{},"body":{"classes/Token.html":{}}}],["validate(payload",{"_index":284,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(value",{"_index":434,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatechallenge",{"_index":444,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validated",{"_index":331,"title":{},"body":{"injectables/TokenService.html":{}}}],["validates",{"_index":414,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatesignatures",{"_index":448,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validation",{"_index":420,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments",{"_index":426,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validationarguments.constraints[0",{"_index":440,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validator",{"_index":190,"title":{},"body":{"classes/Challenge.html":{},"classes/Token.html":{},"dependencies.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatorconstraint",{"_index":425,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["validatorconstraintinterface",{"_index":417,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["value",{"_index":132,"title":{},"body":{"classes/Challenge.html":{},"injectables/ChallengeService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":587,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":152,"title":{},"body":{"classes/Challenge.html":{}}}],["verify",{"_index":143,"title":{},"body":{"classes/Challenge.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["verifying",{"_index":146,"title":{},"body":{"classes/Challenge.html":{}}}],["warranties",{"_index":553,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":549,"title":{},"body":{"license.html":{}}}],["weight",{"_index":464,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["weights",{"_index":458,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["welcome",{"_index":475,"title":{},"body":{"index.html":{}}}],["whether",{"_index":566,"title":{},"body":{"license.html":{}}}],["wishes",{"_index":128,"title":{},"body":{"classes/Challenge.html":{}}}],["without",{"_index":525,"title":{},"body":{"license.html":{}}}],["x.source",{"_index":470,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdr",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"classes/Token.html":{},"injectables/TokenService.html":{},"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdr'})@validate(isxdr",{"_index":310,"title":{},"body":{"classes/Token.html":{}}}],["xdr.operations.map((x",{"_index":469,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["xdr.operations[0].source",{"_index":341,"title":{},"body":{"injectables/TokenService.html":{}}}],["xdrtransaction",{"_index":437,"title":{},"body":{"classes/hasValidSignatures.html":{},"classes/isEd25519.html":{},"classes/isValidChallenge.html":{},"classes/isXDR.html":{}}}],["yarn",{"_index":482,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n                    Decodes and returns the JWT token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Request } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { TokenService, DecodedTokenResponse } from './token/token.service';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly tokenService: TokenService) {}\n\n  /**\n   * Decodes and returns the JWT token\n   *\n   * @param {*} req\n   * @return {DecodedTokenResponse}\n   * @memberof AppController\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @ApiBearerAuth()\n  decodeToken(@Request() req: any): Promise {\n    return this.tokenService.decodeToken(req.headers.authorization.slice(7));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChallengeService\n\nChallengeService\n\nAppModule -->\n\nChallengeService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChallengeService\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { ChallengeService } from './challenge/challenge.service';\nimport { TokenService } from './token/token.service';\n\n@Module({\n  imports: [AuthModule],\n  controllers: [AppController],\n  providers: [ChallengeService, TokenService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateChallenge\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateChallenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateChallenge(challenge: Challenge)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n                    Generates a SEP-0010 challenge\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                Challenge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(token: Token)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:54\n                \n            \n\n\n            \n                \n                     generateToken takes a challenge XDR and returns a JTW token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Token\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Query, Post } from '@nestjs/common';\nimport * as StellarSdk from 'stellar-sdk';\nimport { ChallengeService } from '../challenge/challenge.service';\nimport { TokenService } from '../token/token.service';\nimport * as dotenv from 'dotenv';\nimport { Challenge } from '../challenge';\nimport { Token } from '../token';\nStellarSdk.Networks.TESTNET;\n\ndotenv.config();\n\ntype ChallengeResponse =\n  | {\n      transaction: string;\n      network_passphrase: string;\n    }\n  | string;\n\ntype TokenResponse =\n  | {\n      token: string;\n    }\n  | string;\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly challengeService: ChallengeService,\n    private readonly tokenService: TokenService,\n  ) {}\n\n  /**\n   * Generates a SEP-0010 challenge\n   *\n   * @param {Challenge} challenge\n   * @return {Promise}\n   * @memberof AuthController\n   */\n  @Get()\n  async generateChallenge(\n    @Query() challenge: Challenge,\n  ): Promise {\n    return this.challengeService.generateChallenge(challenge);\n  }\n\n  /**\n   *  generateToken takes a challenge XDR and returns a JTW token.\n   *\n   * @param {Token} token\n   * @return {Promise}\n   * @memberof AuthController\n   */\n  @Post()\n  async generateToken(@Body() token: Token): Promise {\n    return this.tokenService.generateToken(token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nChallengeService\n\nChallengeService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nChallengeService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChallengeService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { ChallengeService } from '../challenge/challenge.service';\nimport { TokenService } from '../token/token.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PassportModule],\n  controllers: [AuthController],\n  providers: [ChallengeService, TokenService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Challenge.html":{"url":"classes/Challenge.html","title":"class - Challenge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Challenge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/challenge.ts\n        \n\n\n            \n                Description\n            \n            \n                SEP-0010 Challenge\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                account\n                            \n                            \n                                    Readonly\n                                    Optional\n                                client_domain\n                            \n                            \n                                    Readonly\n                                    Optional\n                                home_domain\n                            \n                            \n                                    Readonly\n                                    Optional\n                                memo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The Client Account, which can be a stellar account (G...) or muxed account (M...) that the Client wishes to authenticate with the Server.'})@Validate(isEd25519, {message: '($value) is not a valid Ed25519 Public Key!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        client_domain\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A Client Domain. Supplied by Clients that intend to verify their domain in addition to the Client Account. See Verifying the Client Domain. Servers should ignore this parameter if the Server does not support Client Domain verification, or the Server does not support verification for the specific Client Domain included in the request.'})@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        home_domain\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A Home Domain. Servers that generate tokens for multiple Home Domains can use this parameter to identify which home domain the Client hopes to authenticate with. If not provided by the Client, the Server should assume a default for backwards compatibility with older Clients'})@IsIn(['undefined'])@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        memo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The memo to attach to the challenge transaction. Only permitted if a Stellar account (G...) is used. The memo must be of type id. Other memo types are not supported. See the Memo section for details.'})@IsOptional()@IsByteLength(0, 32)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/challenge.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsByteLength,\n  IsFQDN,\n  IsIn,\n  IsOptional,\n  Validate,\n} from 'class-validator';\nimport { isEd25519 } from './CustomValidators';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\nconst HOME_DOMAIN = new URL(process.env.HOME_DOMAIN);\n\n/**\n * SEP-0010 Challenge\n *\n * @export\n * @class Challenge\n */\nexport class Challenge {\n  @ApiProperty({\n    description:\n      'The Client Account, which can be a stellar account (G...) or muxed account (M...) that the Client wishes to authenticate with the Server.',\n  })\n  @Validate(isEd25519, {\n    message: '($value) is not a valid Ed25519 Public Key!',\n  })\n  readonly account: string;\n\n  @ApiPropertyOptional({\n    description:\n      'The memo to attach to the challenge transaction. Only permitted if a Stellar account (G...) is used. The memo must be of type id. Other memo types are not supported. See the Memo section for details.',\n  })\n  @IsOptional()\n  @IsByteLength(0, 32)\n  readonly memo?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'A Home Domain. Servers that generate tokens for multiple Home Domains can use this parameter to identify which home domain the Client hopes to authenticate with. If not provided by the Client, the Server should assume a default for backwards compatibility with older Clients',\n  })\n  @IsIn([HOME_DOMAIN.hostname])\n  @IsFQDN()\n  @IsOptional()\n  readonly home_domain?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'A Client Domain. Supplied by Clients that intend to verify their domain in addition to the Client Account. See Verifying the Client Domain. Servers should ignore this parameter if the Server does not support Client Domain verification, or the Server does not support verification for the specific Client Domain included in the request.',\n  })\n  @IsFQDN()\n  @IsOptional()\n  readonly client_domain?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChallengeService.html":{"url":"injectables/ChallengeService.html","title":"injectable - ChallengeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChallengeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/challenge/challenge.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles SEP-0010 challenge generation\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateChallenge\n                            \n                            \n                                    Async\n                                getSigningKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateChallenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateChallenge(challenge: Challenge)\n                \n            \n\n\n            \n                \n                    Defined in src/challenge/challenge.service.ts:86\n                \n            \n\n\n            \n                \n                    Generates a SEP-0010 challenge\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                Challenge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSigningKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSigningKey(client_domain: string)\n                \n            \n\n\n            \n                \n                    Defined in src/challenge/challenge.service.ts:49\n                \n            \n\n\n            \n                \n                    Returns the public key of a client domain if it exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client_domain\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ChallengeService.name)\n                    \n                \n                    \n                        \n                                Defined in src/challenge/challenge.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { Challenge } from '../challenge';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as dotenv from 'dotenv';\nimport fetch from 'node-fetch';\nimport * as toml from 'toml';\n\ndotenv.config();\n\n/** Private Key used by the server\n * @type {string}  */\nconst sourceSecretKey: string = process.env.SERVER_PRIVATE_KEY;\n/** Keypair of the Server Account\n * @type {StellarSdk.Keypair}\n * */\nconst sourceKeypair: StellarSdk.Keypair =\n  StellarSdk.Keypair.fromSecret(sourceSecretKey);\n/** Default Home Domain\n * @type {string}  */\nconst HOME_DOMAIN: string = process.env.HOME_DOMAIN;\n/** Network Passphrase\n * @type {string}  */\nconst NETWORK_PASSPHRASE = 'Test SDF Network ; September 2015';\n\nexport type ChallengeResponse =\n  | {\n      transaction: string;\n      network_passphrase: string;\n    }\n  | string;\n\n/**\n * Handles SEP-0010 challenge generation\n *\n * @export\n * @class ChallengeService\n */\n@Injectable()\nexport class ChallengeService {\n  private readonly logger = new Logger(ChallengeService.name);\n\n  /**\n   * Returns the public key of a client domain if it exists\n   *\n   * @param {string} client_domain\n   * @return {Promise}\n   * @memberof ChallengeService\n   */\n  async getSigningKey(\n    client_domain: string,\n  ): Promise {\n    try {\n      const client_domain_signing_key = client_domain\n        ? await fetch(\n            new URL('/.well-known/stellar.toml', 'https://' + client_domain),\n            {\n              headers: {\n                Accept: 'text/plain',\n                'Content-Type': 'text/plain',\n              },\n              method: 'GET',\n            },\n          )\n            .then((response: { text: () => any }) => response.text())\n            .then((data: string) => {\n              if (toml.parse(data).SIGNING_KEY) {\n                return toml.parse(data).SIGNING_KEY;\n              }\n            })\n        : null;\n      return client_domain_signing_key;\n    } catch {\n      throw new BadRequestException(\n        \"Unable to fetch 'client_domain' SIGNING_KEY\",\n      );\n    }\n  }\n\n  /**\n   * Generates a SEP-0010 challenge\n   *\n   * @param {Challenge} challenge\n   * @return {Promise}\n   * @memberof ChallengeService\n   */\n  async generateChallenge(challenge: Challenge): Promise {\n    const client_domain_signing_key = await this.getSigningKey(\n      challenge.client_domain,\n    );\n\n    this.logger.debug('home_domain:' + challenge.home_domain);\n    this.logger.debug('client_account:' + challenge.account);\n    this.logger.debug('client_domain_signing_key:' + client_domain_signing_key);\n    this.logger.debug('client_domain:' + challenge.client_domain);\n    this.logger.debug('Memo: ' + challenge.memo);\n\n    // TODO: Add memo support once js-stellar-sdk supports it officially (only beta at the moment https://github.com/stellar/js-stellar-sdk/releases/tag/v9.0.0-beta.1)\n    // TODO: Add client_domain support when this gets added: https://github.com/stellar/js-stellar-sdk/issues/668\n    const transaction = StellarSdk.Utils.buildChallengeTx(\n      sourceKeypair,\n      challenge.account,\n      challenge.home_domain || HOME_DOMAIN,\n      300,\n      NETWORK_PASSPHRASE,\n      HOME_DOMAIN + '/auth',\n    );\n\n    return {\n      transaction: transaction,\n      network_passphrase: NETWORK_PASSPHRASE,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token.ts\n        \n\n\n            \n                Description\n            \n            \n                SEP-0010 Token Request Parameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                transaction\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        transaction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The base64 encoded signed challenge transaction XDR'})@Validate(isXDR, ['base64'], {message: 'Transaction is not a valid base64-encoded XDR transaction enveloppe!'})@Validate(isValidChallenge, {message: 'Transaction is not a valid challenge transaction!'})@Validate(hasValidSignatures, {message: 'Signatures are not valid or do not meet the required threshold!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/token.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Validate } from 'class-validator';\nimport {\n  hasValidSignatures,\n  isValidChallenge,\n  isXDR,\n} from './CustomValidators';\n\n/**\n * SEP-0010 Token Request Parameters\n *\n * @export\n * @class Token\n */\nexport class Token {\n  @ApiProperty({\n    description: 'The base64 encoded signed challenge transaction XDR',\n  })\n  @Validate(isXDR, ['base64'], {\n    message:\n      'Transaction is not a valid base64-encoded XDR transaction enveloppe!',\n  })\n  @Validate(isValidChallenge, {\n    message: 'Transaction is not a valid challenge transaction!',\n  })\n  @Validate(hasValidSignatures, {\n    message: 'Signatures are not valid or do not meet the required threshold!',\n  })\n  readonly transaction: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/token/token.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles JWT token generation and decoding\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeToken(token: TokenResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/token/token.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                TokenResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(token: Token)\n                \n            \n\n\n            \n                \n                    Defined in src/token/token.service.ts:44\n                \n            \n\n\n            \n                \n                    generateToken takes a (previously validated) challenge XDR and returns a JTW token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                Token\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Token } from '../token';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as dotenv from 'dotenv';\nimport * as jwt from 'jsonwebtoken';\n\ndotenv.config();\n\n/** Default Home Domain\n * @type {string}  */\nconst HOME_DOMAIN: string = process.env.HOME_DOMAIN;\n\n/** Secret key used for JWT generation\n * @type {string}  */\nconst JWT_SECRET: string = process.env.JWT_SECRET;\n\ntype TokenResponse =\n  | {\n      token: string;\n    }\n  | string;\n\nexport type DecodedTokenResponse =\n  | {\n      token: string | jwt.JwtPayload;\n    }\n  | string;\n\n/**\n * Handles JWT token generation and decoding\n *\n * @export\n * @class TokenService\n */\n@Injectable()\nexport class TokenService {\n  /**\n   * generateToken takes a (previously validated) challenge XDR and returns a JTW token.\n   *\n   * @param {Token} token\n   * @return {Promise}\n   * @memberof TokenService\n   */\n  async generateToken(token: Token): Promise {\n    const xdr = new StellarSdk.Transaction(\n      token.transaction,\n      'Test SDF Network ; September 2015',\n    );\n\n    const payload = {\n      iss: HOME_DOMAIN + '/auth',\n      sub: xdr.operations[0].source,\n      iat: parseInt(xdr.timeBounds.minTime, 10),\n      exp: parseInt(xdr.timeBounds.minTime, 10) + 86400,\n    };\n\n    return {\n      token: jwt.sign(payload, JWT_SECRET),\n    };\n  }\n  async decodeToken(token: TokenResponse): Promise {\n    const decodedToken = jwt.decode(token.toString());\n    return {\n      token: decodedToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            hasValidSignatures\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isEd25519\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isValidChallenge\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            class\n            isXDR\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            variable\n            HOME_DOMAIN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            variable\n            NETWORK_PASSPHRASE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            variable\n            server\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            variable\n            sourceKeypair\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/CustomValidators.ts\n            \n            variable\n            sourceSecretKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/challenge.ts\n            \n            class\n            Challenge\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/challenge.ts\n            \n            variable\n            HOME_DOMAIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/challenge/challenge.service.ts\n            \n            injectable\n            ChallengeService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/challenge/challenge.service.ts\n            \n            variable\n            HOME_DOMAIN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/challenge/challenge.service.ts\n            \n            variable\n            NETWORK_PASSPHRASE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/challenge/challenge.service.ts\n            \n            variable\n            sourceKeypair\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/challenge/challenge.service.ts\n            \n            variable\n            sourceSecretKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/token.ts\n            \n            class\n            Token\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/token/token.service.ts\n            \n            variable\n            HOME_DOMAIN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/token/token.service.ts\n            \n            variable\n            JWT_SECRET\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.6\n        \n            @nestjs/swagger : ^5.0.9\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            dotenv : ^10.0.0\n        \n            git-cz : ^4.7.6\n        \n            jsonwebtoken : ^8.5.1\n        \n            passport : ^0.5.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            stellar-sdk : ^8.3.0\n        \n            swagger-ui-express : ^4.1.6\n        \n            toml : ^3.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/hasValidSignatures.html":{"url":"classes/hasValidSignatures.html","title":"class - hasValidSignatures","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  hasValidSignatures\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the required signatures are present on the transaction\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:207\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(input: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:160\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\n/** Private Key used by the server\n * @type {string}  */\nconst sourceSecretKey: string = process.env.SERVER_PRIVATE_KEY;\n/** Keypair of the Server Account\n * @type {StellarSdk.Keypair}\n * */\nconst sourceKeypair: StellarSdk.Keypair =\n  StellarSdk.Keypair.fromSecret(sourceSecretKey);\n/** Default Home Domain\n * @type {string}  */\nconst HOME_DOMAIN: string = process.env.HOME_DOMAIN;\n/** Network Passphrase\n * @type {string}  */\nconst NETWORK_PASSPHRASE = 'Test SDF Network ; September 2015';\n/** URL of the horizon server\n * @type {StellarSdk.Server}  */\nconst server: StellarSdk.Server = new StellarSdk.Server(\n  'https://horizon-testnet.stellar.org',\n);\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        sourceKeypair.publicKey(),\n        NETWORK_PASSPHRASE,\n        HOME_DOMAIN,\n        HOME_DOMAIN + '/auth',\n      );\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(input, NETWORK_PASSPHRASE);\n\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      }\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nWelcome to stellar-sep-0010-server 👋\n\n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n\nJavaScript SEP-0010 Server Reference Implementation\n\n🏠 Homepage\n✨ Demo\nInstall\nyarn installUsage\nyarn run startRun tests\nyarn run testAuthor\n👤 Felix Perron-Brault\n\nGithub: @fpbrault\n\nShow your support\nGive a ⭐️ if this project helped you!\n📝 License\nCopyright © 2021 Felix Perron-Brault.\nThis project is MIT licensed.\n\nThis README was generated with ❤️ by readme-md-generator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isEd25519.html":{"url":"classes/isEd25519.html","title":"class - isEd25519","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isEd25519\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the account public key is a valid Ed25519 key\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:57\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:47\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\n/** Private Key used by the server\n * @type {string}  */\nconst sourceSecretKey: string = process.env.SERVER_PRIVATE_KEY;\n/** Keypair of the Server Account\n * @type {StellarSdk.Keypair}\n * */\nconst sourceKeypair: StellarSdk.Keypair =\n  StellarSdk.Keypair.fromSecret(sourceSecretKey);\n/** Default Home Domain\n * @type {string}  */\nconst HOME_DOMAIN: string = process.env.HOME_DOMAIN;\n/** Network Passphrase\n * @type {string}  */\nconst NETWORK_PASSPHRASE = 'Test SDF Network ; September 2015';\n/** URL of the horizon server\n * @type {StellarSdk.Server}  */\nconst server: StellarSdk.Server = new StellarSdk.Server(\n  'https://horizon-testnet.stellar.org',\n);\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        sourceKeypair.publicKey(),\n        NETWORK_PASSPHRASE,\n        HOME_DOMAIN,\n        HOME_DOMAIN + '/auth',\n      );\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(input, NETWORK_PASSPHRASE);\n\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      }\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isValidChallenge.html":{"url":"classes/isValidChallenge.html","title":"class - isValidChallenge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isValidChallenge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the challenge transaction contains the expected operations and other parameters\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:139\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(input: string)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:117\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\n/** Private Key used by the server\n * @type {string}  */\nconst sourceSecretKey: string = process.env.SERVER_PRIVATE_KEY;\n/** Keypair of the Server Account\n * @type {StellarSdk.Keypair}\n * */\nconst sourceKeypair: StellarSdk.Keypair =\n  StellarSdk.Keypair.fromSecret(sourceSecretKey);\n/** Default Home Domain\n * @type {string}  */\nconst HOME_DOMAIN: string = process.env.HOME_DOMAIN;\n/** Network Passphrase\n * @type {string}  */\nconst NETWORK_PASSPHRASE = 'Test SDF Network ; September 2015';\n/** URL of the horizon server\n * @type {StellarSdk.Server}  */\nconst server: StellarSdk.Server = new StellarSdk.Server(\n  'https://horizon-testnet.stellar.org',\n);\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        sourceKeypair.publicKey(),\n        NETWORK_PASSPHRASE,\n        HOME_DOMAIN,\n        HOME_DOMAIN + '/auth',\n      );\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(input, NETWORK_PASSPHRASE);\n\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      }\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isXDR.html":{"url":"classes/isXDR.html","title":"class - isXDR","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isXDR\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/CustomValidators.ts\n        \n\n\n            \n                Description\n            \n            \n                Validates that the transaction is a valid XDR transaction envelope\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:96\n                \n            \n\n\n            \n                \n                    Default validation error message\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(input: Buffer, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/CustomValidators.ts:79\n                \n            \n\n\n            \n                \n                    Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport * as StellarSdk from 'stellar-sdk';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\n/** Private Key used by the server\n * @type {string}  */\nconst sourceSecretKey: string = process.env.SERVER_PRIVATE_KEY;\n/** Keypair of the Server Account\n * @type {StellarSdk.Keypair}\n * */\nconst sourceKeypair: StellarSdk.Keypair =\n  StellarSdk.Keypair.fromSecret(sourceSecretKey);\n/** Default Home Domain\n * @type {string}  */\nconst HOME_DOMAIN: string = process.env.HOME_DOMAIN;\n/** Network Passphrase\n * @type {string}  */\nconst NETWORK_PASSPHRASE = 'Test SDF Network ; September 2015';\n/** URL of the horizon server\n * @type {StellarSdk.Server}  */\nconst server: StellarSdk.Server = new StellarSdk.Server(\n  'https://horizon-testnet.stellar.org',\n);\n\n/**\n * Validates that the account public key is a valid Ed25519 key\n *\n * @export\n * @class isEd25519\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'ed25519key', async: false })\nexport class isEd25519 implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} value\n   * @return {boolean}\n   * @memberof isEd25519\n   */\n  validate(value: string): boolean {\n    return StellarSdk.StrKey.isValidEd25519PublicKey(value);\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Key is not a valid Ed25519 Public Key!';\n  }\n}\n\n/**\n * Validates that the transaction is a valid XDR transaction envelope\n *\n * @export\n * @class isXDR\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'xdrtransaction', async: false })\nexport class isXDR implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {Buffer} input\n   * @param {ValidationArguments} validationArguments\n   * @return {boolean}\n   * @memberof isXDR\n   */\n  validate(input: Buffer, validationArguments: ValidationArguments): boolean {\n    try {\n      return StellarSdk.xdr.TransactionEnvelope.validateXDR(\n        input,\n        validationArguments.constraints[0],\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid XDR transaction!';\n  }\n}\n\n/**\n * Validates that the challenge transaction contains the expected operations and other parameters\n *\n * @export\n * @class isValidChallenge\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatechallenge', async: true })\nexport class isValidChallenge implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof isValidChallenge\n   */\n  async validate(input: string): Promise {\n    try {\n      StellarSdk.Utils.readChallengeTx(\n        input,\n        sourceKeypair.publicKey(),\n        NETWORK_PASSPHRASE,\n        HOME_DOMAIN,\n        HOME_DOMAIN + '/auth',\n      );\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Transaction is not a valid challenge transaction!';\n  }\n}\n\n/**\n * Validates that the required signatures are present on the transaction\n *\n * @export\n * @class hasValidSignatures\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'validatesignatures', async: true })\nexport class hasValidSignatures implements ValidatorConstraintInterface {\n  /**\n   * Validation\n   *\n   * @param {string} input\n   * @return {boolean}\n   * @memberof hasValidSignatures\n   */\n  async validate(input: string): Promise {\n    try {\n      // Decode the received input as a base64-urlencoded XDR representation of Stellar transaction envelope;\n      const xdr = new StellarSdk.Transaction(input, NETWORK_PASSPHRASE);\n\n      // Retrieve the Client Account to check thresholds and signature weights.\n      const clientAccount = await server.loadAccount(xdr.operations[0].source);\n\n      // Check if high_threshold is higher than 0. If it is, verify that the signatures provide weight that meets this threshold.\n      if (clientAccount.thresholds.high_threshold > 0) {\n        StellarSdk.Utils.verifyChallengeTxSigners(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          StellarSdk.Utils.gatherTxSigners(\n            xdr,\n            xdr.operations.map((x) => {\n              return x.source;\n            }),\n          ),\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      } else {\n        StellarSdk.Utils.verifyChallengeTxThreshold(\n          input,\n          sourceKeypair.publicKey(),\n          NETWORK_PASSPHRASE,\n          clientAccount.thresholds.high_threshold,\n          clientAccount.signers,\n          HOME_DOMAIN,\n          HOME_DOMAIN + '/auth',\n        );\n      }\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Default validation error message\n   *\n   * @return {string}\n   * @memberof hasValidSignatures\n   */\n  defaultMessage(): string {\n    return 'Signatures are not valid or do not meet the required threshold!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Felix Perron-Brault\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChallengeService\n\nChallengeService\n\nAuthModule -->\n\nChallengeService->AuthModule\n\n\n\nAppModule -->\n\nChallengeService->AppModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\nAppModule -->\n\nTokenService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChallengeResponse   (src/.../auth.controller.ts)\n                        \n                        \n                            ChallengeResponse   (src/.../challenge.service.ts)\n                        \n                        \n                            DecodedTokenResponse   (src/.../token.service.ts)\n                        \n                        \n                            TokenResponse   (src/.../auth.controller.ts)\n                        \n                        \n                            TokenResponse   (src/.../token.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    ChallengeResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    src/challenge/challenge.service.ts\n    \n    \n        \n            \n                \n                    \n                    ChallengeResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    src/token/token.service.ts\n    \n    \n        \n            \n                \n                    \n                    DecodedTokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TokenResponse\n                \n            \n            \n                \n                        literal type | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HOME_DOMAIN   (src/.../CustomValidators.ts)\n                        \n                        \n                            HOME_DOMAIN   (src/.../challenge.ts)\n                        \n                        \n                            HOME_DOMAIN   (src/.../challenge.service.ts)\n                        \n                        \n                            HOME_DOMAIN   (src/.../token.service.ts)\n                        \n                        \n                            JWT_SECRET   (src/.../constants.ts)\n                        \n                        \n                            JWT_SECRET   (src/.../token.service.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            NETWORK_PASSPHRASE   (src/.../CustomValidators.ts)\n                        \n                        \n                            NETWORK_PASSPHRASE   (src/.../challenge.service.ts)\n                        \n                        \n                            server   (src/.../CustomValidators.ts)\n                        \n                        \n                            sourceKeypair   (src/.../CustomValidators.ts)\n                        \n                        \n                            sourceKeypair   (src/.../challenge.service.ts)\n                        \n                        \n                            sourceSecretKey   (src/.../CustomValidators.ts)\n                        \n                        \n                            sourceSecretKey   (src/.../challenge.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/CustomValidators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HOME_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.HOME_DOMAIN\n                    \n                \n\n            \n                \n                    Default Home Domain\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NETWORK_PASSPHRASE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Test SDF Network ; September 2015'\n                    \n                \n\n            \n                \n                    Network Passphrase\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StellarSdk.Server\n\n                    \n                \n                \n                    \n                        Default value : new StellarSdk.Server(\n  'https://horizon-testnet.stellar.org',\n)\n                    \n                \n\n            \n                \n                    URL of the horizon server\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceKeypair\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StellarSdk.Keypair\n\n                    \n                \n                \n                    \n                        Default value : StellarSdk.Keypair.fromSecret(sourceSecretKey)\n                    \n                \n\n            \n                \n                    Keypair of the Server Account\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceSecretKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.SERVER_PRIVATE_KEY\n                    \n                \n\n            \n                \n                    Private Key used by the server\n\n                \n            \n\n        \n    \n\n    src/challenge.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HOME_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new URL(process.env.HOME_DOMAIN)\n                    \n                \n\n\n        \n    \n\n    src/challenge/challenge.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HOME_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.HOME_DOMAIN\n                    \n                \n\n            \n                \n                    Default Home Domain\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NETWORK_PASSPHRASE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Test SDF Network ; September 2015'\n                    \n                \n\n            \n                \n                    Network Passphrase\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceKeypair\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StellarSdk.Keypair\n\n                    \n                \n                \n                    \n                        Default value : StellarSdk.Keypair.fromSecret(sourceSecretKey)\n                    \n                \n\n            \n                \n                    Keypair of the Server Account\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceSecretKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.SERVER_PRIVATE_KEY\n                    \n                \n\n            \n                \n                    Private Key used by the server\n\n                \n            \n\n        \n    \n\n    src/token/token.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HOME_DOMAIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.HOME_DOMAIN\n                    \n                \n\n            \n                \n                    Default Home Domain\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.JWT_SECRET\n                    \n                \n\n            \n                \n                    Secret key used for JWT generation\n\n                \n            \n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.JWT_SECRET\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: JWT_SECRET,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
